/*****START OF DEBUG INFORMATION*****

The primary key column list:
[id]

The INSERT column list:
[id],[Procedure_RepoObject_guid],[Instance],[Description]

The UPDATE column list:
 [Target].[Procedure_RepoObject_guid] = [Source].[Procedure_RepoObject_guid], 
  [Target].[Instance] = [Source].[Instance], 
  [Target].[Description] = [Source].[Description]

The SELECT statement executed to generate the MERGE:
SELECT ' ' + CASE WHEN ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) = 1 THEN ' ' ELSE ',' END + '('+ COALESCE(LTRIM(RTRIM(CONVERT(char, [id]))),'NULL')+',' + COALESCE('N''' + REPLACE(CONVERT(char(36),RTRIM([Procedure_RepoObject_guid])),'''','''''')+'''','NULL')+',' + COALESCE('N''' + REPLACE([Instance],'''','''''')+'''','NULL')+',' + COALESCE('N''' + REPLACE([Description],'''','''''')+'''','NULL')+')'  FROM [repo].[ProcedureInstance] (NOLOCK) ORDER BY [id]

*****END OF DEBUG INFORMATION*****/


USE [dhw_self]
GO

--MERGE generated by 'sp_generate_merge' stored procedure
--Originally by Vyas (http://vyaskn.tripod.com/code): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008+ by Daniel Nolan (https://twitter.com/dnlnln)

SET NOCOUNT ON

SET IDENTITY_INSERT [repo].[ProcedureInstance] ON

MERGE INTO [repo].[ProcedureInstance] AS [Target]
USING (VALUES
  (1,N'8B90291C-9D61-EB11-84DC-A81E8446D5B0',N'',NULL)
 ,(2,N'8D90291C-9D61-EB11-84DC-A81E8446D5B0',N'',NULL)
 ,(3,N'8F90291C-9D61-EB11-84DC-A81E8446D5B0',N'',NULL)
 ,(4,N'9190291C-9D61-EB11-84DC-A81E8446D5B0',N'',NULL)
 ,(5,N'9390291C-9D61-EB11-84DC-A81E8446D5B0',N'',NULL)
 ,(6,N'9590291C-9D61-EB11-84DC-A81E8446D5B0',N'',NULL)
 ,(7,N'9790291C-9D61-EB11-84DC-A81E8446D5B0',N'',NULL)
 ,(8,N'9990291C-9D61-EB11-84DC-A81E8446D5B0',N'',NULL)
 ,(9,N'9B90291C-9D61-EB11-84DC-A81E8446D5B0',N'',NULL)
 ,(10,N'9D90291C-9D61-EB11-84DC-A81E8446D5B0',N'',NULL)
 ,(11,N'9F90291C-9D61-EB11-84DC-A81E8446D5B0',N'',NULL)
 ,(12,N'A190291C-9D61-EB11-84DC-A81E8446D5B0',N'',NULL)
 ,(13,N'A390291C-9D61-EB11-84DC-A81E8446D5B0',N'',NULL)
 ,(14,N'A590291C-9D61-EB11-84DC-A81E8446D5B0',N'',NULL)
 ,(15,N'A790291C-9D61-EB11-84DC-A81E8446D5B0',N'',NULL)
 ,(16,N'A990291C-9D61-EB11-84DC-A81E8446D5B0',N'',NULL)
 ,(17,N'AB90291C-9D61-EB11-84DC-A81E8446D5B0',N'',NULL)
 ,(18,N'AE90291C-9D61-EB11-84DC-A81E8446D5B0',N'',NULL)
 ,(19,N'B090291C-9D61-EB11-84DC-A81E8446D5B0',N'',NULL)
 ,(20,N'B390291C-9D61-EB11-84DC-A81E8446D5B0',N'',NULL)
 ,(21,N'B590291C-9D61-EB11-84DC-A81E8446D5B0',N'',NULL)
 ,(22,N'B890291C-9D61-EB11-84DC-A81E8446D5B0',N'',NULL)
 ,(23,N'BA90291C-9D61-EB11-84DC-A81E8446D5B0',N'',NULL)
 ,(24,N'6BCBC49C-3862-EB11-84DC-A81E8446D5B0',N'',NULL)
 ,(25,N'4D4CB4D0-4762-EB11-84DC-A81E8446D5B0',N'',NULL)
 ,(26,N'61CE8EB8-5F62-EB11-84DC-A81E8446D5B0',N'',NULL)
 ,(27,N'65CE8EB8-5F62-EB11-84DC-A81E8446D5B0',N'',NULL)
 ,(28,N'66CE8EB8-5F62-EB11-84DC-A81E8446D5B0',N'',NULL)
 ,(29,N'67CE8EB8-5F62-EB11-84DC-A81E8446D5B0',N'',NULL)
 ,(30,N'68CE8EB8-5F62-EB11-84DC-A81E8446D5B0',N'',NULL)
 ,(31,N'69CE8EB8-5F62-EB11-84DC-A81E8446D5B0',N'',NULL)
 ,(32,N'6ACE8EB8-5F62-EB11-84DC-A81E8446D5B0',N'',NULL)
 ,(33,N'AC7ED154-6B62-EB11-84DC-A81E8446D5B0',N'',NULL)
 ,(34,N'87EFC212-B764-EB11-84DD-A81E8446D5B0',N'',NULL)
 ,(35,N'BD364096-6065-EB11-84DD-A81E8446D5B0',N'',NULL)
 ,(36,N'BE364096-6065-EB11-84DD-A81E8446D5B0',N'',NULL)
 ,(37,N'54B33A4A-426D-EB11-84E2-A81E8446D5B0',N'',NULL)
 ,(38,N'59B33A4A-426D-EB11-84E2-A81E8446D5B0',N'',NULL)
 ,(39,N'5AB33A4A-426D-EB11-84E2-A81E8446D5B0',N'',NULL)
 ,(40,N'5BB33A4A-426D-EB11-84E2-A81E8446D5B0',N'',NULL)
 ,(41,N'60B33A4A-426D-EB11-84E2-A81E8446D5B0',N'',NULL)
 ,(42,N'63B33A4A-426D-EB11-84E2-A81E8446D5B0',N'',NULL)
) AS [Source] ([id],[Procedure_RepoObject_guid],[Instance],[Description])
ON ([Target].[id] = [Source].[id])
WHEN MATCHED AND (
	NULLIF([Source].[Procedure_RepoObject_guid], [Target].[Procedure_RepoObject_guid]) IS NOT NULL OR NULLIF([Target].[Procedure_RepoObject_guid], [Source].[Procedure_RepoObject_guid]) IS NOT NULL OR 
	NULLIF([Source].[Instance], [Target].[Instance]) IS NOT NULL OR NULLIF([Target].[Instance], [Source].[Instance]) IS NOT NULL OR 
	NULLIF([Source].[Description], [Target].[Description]) IS NOT NULL OR NULLIF([Target].[Description], [Source].[Description]) IS NOT NULL) THEN
 UPDATE SET
  [Target].[Procedure_RepoObject_guid] = [Source].[Procedure_RepoObject_guid], 
  [Target].[Instance] = [Source].[Instance], 
  [Target].[Description] = [Source].[Description]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([id],[Procedure_RepoObject_guid],[Instance],[Description])
 VALUES([Source].[id],[Source].[Procedure_RepoObject_guid],[Source].[Instance],[Source].[Description])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [repo].[ProcedureInstance]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[repo].[ProcedureInstance] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO



SET IDENTITY_INSERT [repo].[ProcedureInstance] OFF
SET NOCOUNT OFF
GO
