/*****START OF DEBUG INFORMATION*****

The primary key column list:
[target_RepoObject_guid]

The INSERT column list:
[target_RepoObject_guid],[has_history],[has_history_columns],[history_schema_name],[history_table_name],[is_persistence_check_duplicate_per_pk],[is_persistence_check_for_empty_source],[is_persistence_delete_changed],[is_persistence_delete_missing],[is_persistence_insert],[is_persistence_truncate],[is_persistence_update_changed],[source_RepoObject_guid]

The UPDATE column list:
 [Target].[has_history] = [Source].[has_history], 
  [Target].[has_history_columns] = [Source].[has_history_columns], 
  [Target].[history_schema_name] = [Source].[history_schema_name], 
  [Target].[history_table_name] = [Source].[history_table_name], 
  [Target].[is_persistence_check_duplicate_per_pk] = [Source].[is_persistence_check_duplicate_per_pk], 
  [Target].[is_persistence_check_for_empty_source] = [Source].[is_persistence_check_for_empty_source], 
  [Target].[is_persistence_delete_changed] = [Source].[is_persistence_delete_changed], 
  [Target].[is_persistence_delete_missing] = [Source].[is_persistence_delete_missing], 
  [Target].[is_persistence_insert] = [Source].[is_persistence_insert], 
  [Target].[is_persistence_truncate] = [Source].[is_persistence_truncate], 
  [Target].[is_persistence_update_changed] = [Source].[is_persistence_update_changed], 
  [Target].[source_RepoObject_guid] = [Source].[source_RepoObject_guid]

The SELECT statement executed to generate the MERGE:
SELECT ' ' + CASE WHEN ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) = 1 THEN ' ' ELSE ',' END + '('+ COALESCE('N''' + REPLACE(CONVERT(char(36),RTRIM([target_RepoObject_guid])),'''','''''')+'''','NULL')+',' + COALESCE(LTRIM(RTRIM(CONVERT(char, [has_history]))),'NULL')+',' + COALESCE(LTRIM(RTRIM(CONVERT(char, [has_history_columns]))),'NULL')+',' + COALESCE('N''' + REPLACE([history_schema_name],'''','''''')+'''','NULL')+',' + COALESCE('N''' + REPLACE([history_table_name],'''','''''')+'''','NULL')+',' + COALESCE(LTRIM(RTRIM(CONVERT(char, [is_persistence_check_duplicate_per_pk]))),'NULL')+',' + COALESCE(LTRIM(RTRIM(CONVERT(char, [is_persistence_check_for_empty_source]))),'NULL')+',' + COALESCE(LTRIM(RTRIM(CONVERT(char, [is_persistence_delete_changed]))),'NULL')+',' + COALESCE(LTRIM(RTRIM(CONVERT(char, [is_persistence_delete_missing]))),'NULL')+',' + COALESCE(LTRIM(RTRIM(CONVERT(char, [is_persistence_insert]))),'NULL')+',' + COALESCE(LTRIM(RTRIM(CONVERT(char, [is_persistence_truncate]))),'NULL')+',' + COALESCE(LTRIM(RTRIM(CONVERT(char, [is_persistence_update_changed]))),'NULL')+',' + COALESCE('N''' + REPLACE(CONVERT(char(36),RTRIM([source_RepoObject_guid])),'''','''''')+'''','NULL')+')'  FROM [repo].[RepoObject_persistence] (NOLOCK) ORDER BY [target_RepoObject_guid]

*****END OF DEBUG INFORMATION*****/


USE [dhw_self]
GO

--MERGE generated by 'sp_generate_merge' stored procedure
--Originally by Vyas (http://vyaskn.tripod.com/code): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008+ by Daniel Nolan (https://twitter.com/dnlnln)

SET NOCOUNT ON

MERGE INTO [repo].[RepoObject_persistence] AS [Target]
USING (VALUES
  (N'4E4CB4D0-4762-EB11-84DC-A81E8446D5B0',0,0,NULL,NULL,0,0,0,0,1,1,0,N'3F90291C-9D61-EB11-84DC-A81E8446D5B0')
 ,(N'AB7ED154-6B62-EB11-84DC-A81E8446D5B0',0,0,NULL,NULL,0,0,0,0,1,1,0,N'7B90291C-9D61-EB11-84DC-A81E8446D5B0')
 ,(N'86EFC212-B764-EB11-84DD-A81E8446D5B0',0,0,NULL,NULL,0,0,0,0,1,1,0,N'127E4BE1-8F64-EB11-84DD-A81E8446D5B0')
 ,(N'88EFC212-B764-EB11-84DD-A81E8446D5B0',0,0,NULL,NULL,0,1,0,1,1,0,1,N'A89FCDB3-3265-EB11-84DD-A81E8446D5B0')
 ,(N'89EFC212-B764-EB11-84DD-A81E8446D5B0',0,0,NULL,NULL,0,1,0,1,1,0,1,N'A99FCDB3-3265-EB11-84DD-A81E8446D5B0')
 ,(N'2AC1E60F-ED66-EB11-84DD-A81E8446D5B0',0,0,NULL,NULL,0,0,0,1,1,0,1,N'32C1E60F-ED66-EB11-84DD-A81E8446D5B0')
) AS [Source] ([target_RepoObject_guid],[has_history],[has_history_columns],[history_schema_name],[history_table_name],[is_persistence_check_duplicate_per_pk],[is_persistence_check_for_empty_source],[is_persistence_delete_changed],[is_persistence_delete_missing],[is_persistence_insert],[is_persistence_truncate],[is_persistence_update_changed],[source_RepoObject_guid])
ON ([Target].[target_RepoObject_guid] = [Source].[target_RepoObject_guid])
WHEN MATCHED AND (
	NULLIF([Source].[has_history], [Target].[has_history]) IS NOT NULL OR NULLIF([Target].[has_history], [Source].[has_history]) IS NOT NULL OR 
	NULLIF([Source].[has_history_columns], [Target].[has_history_columns]) IS NOT NULL OR NULLIF([Target].[has_history_columns], [Source].[has_history_columns]) IS NOT NULL OR 
	NULLIF([Source].[history_schema_name], [Target].[history_schema_name]) IS NOT NULL OR NULLIF([Target].[history_schema_name], [Source].[history_schema_name]) IS NOT NULL OR 
	NULLIF([Source].[history_table_name], [Target].[history_table_name]) IS NOT NULL OR NULLIF([Target].[history_table_name], [Source].[history_table_name]) IS NOT NULL OR 
	NULLIF([Source].[is_persistence_check_duplicate_per_pk], [Target].[is_persistence_check_duplicate_per_pk]) IS NOT NULL OR NULLIF([Target].[is_persistence_check_duplicate_per_pk], [Source].[is_persistence_check_duplicate_per_pk]) IS NOT NULL OR 
	NULLIF([Source].[is_persistence_check_for_empty_source], [Target].[is_persistence_check_for_empty_source]) IS NOT NULL OR NULLIF([Target].[is_persistence_check_for_empty_source], [Source].[is_persistence_check_for_empty_source]) IS NOT NULL OR 
	NULLIF([Source].[is_persistence_delete_changed], [Target].[is_persistence_delete_changed]) IS NOT NULL OR NULLIF([Target].[is_persistence_delete_changed], [Source].[is_persistence_delete_changed]) IS NOT NULL OR 
	NULLIF([Source].[is_persistence_delete_missing], [Target].[is_persistence_delete_missing]) IS NOT NULL OR NULLIF([Target].[is_persistence_delete_missing], [Source].[is_persistence_delete_missing]) IS NOT NULL OR 
	NULLIF([Source].[is_persistence_insert], [Target].[is_persistence_insert]) IS NOT NULL OR NULLIF([Target].[is_persistence_insert], [Source].[is_persistence_insert]) IS NOT NULL OR 
	NULLIF([Source].[is_persistence_truncate], [Target].[is_persistence_truncate]) IS NOT NULL OR NULLIF([Target].[is_persistence_truncate], [Source].[is_persistence_truncate]) IS NOT NULL OR 
	NULLIF([Source].[is_persistence_update_changed], [Target].[is_persistence_update_changed]) IS NOT NULL OR NULLIF([Target].[is_persistence_update_changed], [Source].[is_persistence_update_changed]) IS NOT NULL OR 
	NULLIF([Source].[source_RepoObject_guid], [Target].[source_RepoObject_guid]) IS NOT NULL OR NULLIF([Target].[source_RepoObject_guid], [Source].[source_RepoObject_guid]) IS NOT NULL) THEN
 UPDATE SET
  [Target].[has_history] = [Source].[has_history], 
  [Target].[has_history_columns] = [Source].[has_history_columns], 
  [Target].[history_schema_name] = [Source].[history_schema_name], 
  [Target].[history_table_name] = [Source].[history_table_name], 
  [Target].[is_persistence_check_duplicate_per_pk] = [Source].[is_persistence_check_duplicate_per_pk], 
  [Target].[is_persistence_check_for_empty_source] = [Source].[is_persistence_check_for_empty_source], 
  [Target].[is_persistence_delete_changed] = [Source].[is_persistence_delete_changed], 
  [Target].[is_persistence_delete_missing] = [Source].[is_persistence_delete_missing], 
  [Target].[is_persistence_insert] = [Source].[is_persistence_insert], 
  [Target].[is_persistence_truncate] = [Source].[is_persistence_truncate], 
  [Target].[is_persistence_update_changed] = [Source].[is_persistence_update_changed], 
  [Target].[source_RepoObject_guid] = [Source].[source_RepoObject_guid]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([target_RepoObject_guid],[has_history],[has_history_columns],[history_schema_name],[history_table_name],[is_persistence_check_duplicate_per_pk],[is_persistence_check_for_empty_source],[is_persistence_delete_changed],[is_persistence_delete_missing],[is_persistence_insert],[is_persistence_truncate],[is_persistence_update_changed],[source_RepoObject_guid])
 VALUES([Source].[target_RepoObject_guid],[Source].[has_history],[Source].[has_history_columns],[Source].[history_schema_name],[Source].[history_table_name],[Source].[is_persistence_check_duplicate_per_pk],[Source].[is_persistence_check_for_empty_source],[Source].[is_persistence_delete_changed],[Source].[is_persistence_delete_missing],[Source].[is_persistence_insert],[Source].[is_persistence_truncate],[Source].[is_persistence_update_changed],[Source].[source_RepoObject_guid])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [repo].[RepoObject_persistence]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[repo].[RepoObject_persistence] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO


SET NOCOUNT OFF
GO
