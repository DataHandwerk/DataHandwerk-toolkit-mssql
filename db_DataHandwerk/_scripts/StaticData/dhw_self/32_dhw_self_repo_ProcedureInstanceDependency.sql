/*****START OF DEBUG INFORMATION*****

The primary key column list:
[id]

The INSERT column list:
[id],[referenced_id],[referencing_id],[is_active],[is_PersistenceDependency],[Description]

The UPDATE column list:
 [Target].[referenced_id] = [Source].[referenced_id], 
  [Target].[referencing_id] = [Source].[referencing_id], 
  [Target].[is_active] = [Source].[is_active], 
  [Target].[is_PersistenceDependency] = [Source].[is_PersistenceDependency], 
  [Target].[Description] = [Source].[Description]

The SELECT statement executed to generate the MERGE:
SELECT ' ' + CASE WHEN ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) = 1 THEN ' ' ELSE ',' END + '('+ COALESCE(LTRIM(RTRIM(CONVERT(char, [id]))),'NULL')+',' + COALESCE(LTRIM(RTRIM(CONVERT(char, [referenced_id]))),'NULL')+',' + COALESCE(LTRIM(RTRIM(CONVERT(char, [referencing_id]))),'NULL')+',' + COALESCE(LTRIM(RTRIM(CONVERT(char, [is_active]))),'NULL')+',' + COALESCE(LTRIM(RTRIM(CONVERT(char, [is_PersistenceDependency]))),'NULL')+',' + COALESCE('N''' + REPLACE([Description],'''','''''')+'''','NULL')+')'  FROM [repo].[ProcedureInstanceDependency] (NOLOCK) ORDER BY [id]

*****END OF DEBUG INFORMATION*****/


USE [dhw_self]
GO

--MERGE generated by 'sp_generate_merge' stored procedure
--Originally by Vyas (http://vyaskn.tripod.com/code): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008+ by Daniel Nolan (https://twitter.com/dnlnln)

SET NOCOUNT ON

SET IDENTITY_INSERT [repo].[ProcedureInstanceDependency] ON

MERGE INTO [repo].[ProcedureInstanceDependency] AS [Target]
USING (VALUES
  (1,25,33,1,1,NULL)
 ,(2,34,33,1,1,NULL)
) AS [Source] ([id],[referenced_id],[referencing_id],[is_active],[is_PersistenceDependency],[Description])
ON ([Target].[id] = [Source].[id])
WHEN MATCHED AND (
	NULLIF([Source].[referenced_id], [Target].[referenced_id]) IS NOT NULL OR NULLIF([Target].[referenced_id], [Source].[referenced_id]) IS NOT NULL OR 
	NULLIF([Source].[referencing_id], [Target].[referencing_id]) IS NOT NULL OR NULLIF([Target].[referencing_id], [Source].[referencing_id]) IS NOT NULL OR 
	NULLIF([Source].[is_active], [Target].[is_active]) IS NOT NULL OR NULLIF([Target].[is_active], [Source].[is_active]) IS NOT NULL OR 
	NULLIF([Source].[is_PersistenceDependency], [Target].[is_PersistenceDependency]) IS NOT NULL OR NULLIF([Target].[is_PersistenceDependency], [Source].[is_PersistenceDependency]) IS NOT NULL OR 
	NULLIF([Source].[Description], [Target].[Description]) IS NOT NULL OR NULLIF([Target].[Description], [Source].[Description]) IS NOT NULL) THEN
 UPDATE SET
  [Target].[referenced_id] = [Source].[referenced_id], 
  [Target].[referencing_id] = [Source].[referencing_id], 
  [Target].[is_active] = [Source].[is_active], 
  [Target].[is_PersistenceDependency] = [Source].[is_PersistenceDependency], 
  [Target].[Description] = [Source].[Description]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([id],[referenced_id],[referencing_id],[is_active],[is_PersistenceDependency],[Description])
 VALUES([Source].[id],[Source].[referenced_id],[Source].[referencing_id],[Source].[is_active],[Source].[is_PersistenceDependency],[Source].[Description])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [repo].[ProcedureInstanceDependency]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[repo].[ProcedureInstanceDependency] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO



SET IDENTITY_INSERT [repo].[ProcedureInstanceDependency] OFF
SET NOCOUNT OFF
GO
