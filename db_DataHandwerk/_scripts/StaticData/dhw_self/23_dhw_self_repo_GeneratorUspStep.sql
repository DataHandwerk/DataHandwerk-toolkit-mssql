/*****START OF DEBUG INFORMATION*****

The primary key column list:
[id]

The INSERT column list:
[id],[usp_id],[Number],[Parent_Number],[Name],[has_logging],[is_condition],[is_inactive],[is_SubProcedure],[Statement],[log_source_object],[log_target_object],[log_flag_InsertUpdateDelete],[info_01],[info_02],[info_03],[info_04],[info_05],[info_06],[info_07],[info_08],[info_09]

The UPDATE column list:
 [Target].[usp_id] = [Source].[usp_id], 
  [Target].[Number] = [Source].[Number], 
  [Target].[Parent_Number] = [Source].[Parent_Number], 
  [Target].[Name] = [Source].[Name], 
  [Target].[has_logging] = [Source].[has_logging], 
  [Target].[is_condition] = [Source].[is_condition], 
  [Target].[is_inactive] = [Source].[is_inactive], 
  [Target].[is_SubProcedure] = [Source].[is_SubProcedure], 
  [Target].[Statement] = [Source].[Statement], 
  [Target].[log_source_object] = [Source].[log_source_object], 
  [Target].[log_target_object] = [Source].[log_target_object], 
  [Target].[log_flag_InsertUpdateDelete] = [Source].[log_flag_InsertUpdateDelete], 
  [Target].[info_01] = [Source].[info_01], 
  [Target].[info_02] = [Source].[info_02], 
  [Target].[info_03] = [Source].[info_03], 
  [Target].[info_04] = [Source].[info_04], 
  [Target].[info_05] = [Source].[info_05], 
  [Target].[info_06] = [Source].[info_06], 
  [Target].[info_07] = [Source].[info_07], 
  [Target].[info_08] = [Source].[info_08], 
  [Target].[info_09] = [Source].[info_09]

The SELECT statement executed to generate the MERGE:
SELECT ' ' + CASE WHEN ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) = 1 THEN ' ' ELSE ',' END + '('+ COALESCE(LTRIM(RTRIM(CONVERT(char, [id]))),'NULL')+',' + COALESCE(LTRIM(RTRIM(CONVERT(char, [usp_id]))),'NULL')+',' + COALESCE(LTRIM(RTRIM(CONVERT(char, [Number]))),'NULL')+',' + COALESCE(LTRIM(RTRIM(CONVERT(char, [Parent_Number]))),'NULL')+',' + COALESCE('N''' + REPLACE([Name],'''','''''')+'''','NULL')+',' + COALESCE(LTRIM(RTRIM(CONVERT(char, [has_logging]))),'NULL')+',' + COALESCE(LTRIM(RTRIM(CONVERT(char, [is_condition]))),'NULL')+',' + COALESCE(LTRIM(RTRIM(CONVERT(char, [is_inactive]))),'NULL')+',' + COALESCE(LTRIM(RTRIM(CONVERT(char, [is_SubProcedure]))),'NULL')+',' + COALESCE('N''' + REPLACE([Statement],'''','''''')+'''','NULL')+',' + COALESCE('N''' + REPLACE([log_source_object],'''','''''')+'''','NULL')+',' + COALESCE('N''' + REPLACE([log_target_object],'''','''''')+'''','NULL')+',' + COALESCE('N''' + REPLACE(RTRIM([log_flag_InsertUpdateDelete]),'''','''''')+'''','NULL')+',' + COALESCE('N''' + REPLACE([info_01],'''','''''')+'''','NULL')+',' + COALESCE('N''' + REPLACE([info_02],'''','''''')+'''','NULL')+',' + COALESCE('N''' + REPLACE([info_03],'''','''''')+'''','NULL')+',' + COALESCE('N''' + REPLACE([info_04],'''','''''')+'''','NULL')+',' + COALESCE('N''' + REPLACE([info_05],'''','''''')+'''','NULL')+',' + COALESCE('N''' + REPLACE([info_06],'''','''''')+'''','NULL')+',' + COALESCE('N''' + REPLACE([info_07],'''','''''')+'''','NULL')+',' + COALESCE('N''' + REPLACE([info_08],'''','''''')+'''','NULL')+',' + COALESCE('N''' + REPLACE([info_09],'''','''''')+'''','NULL')+')'  FROM [repo].[GeneratorUspStep] (NOLOCK) ORDER BY [id]

*****END OF DEBUG INFORMATION*****/


USE [dhw_self]
GO

--MERGE generated by 'sp_generate_merge' stored procedure
--Originally by Vyas (http://vyaskn.tripod.com/code): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008+ by Daniel Nolan (https://twitter.com/dnlnln)

SET NOCOUNT ON

SET IDENTITY_INSERT [uspgenerator].[GeneratorUspStep] ON

MERGE INTO [uspgenerator].[GeneratorUspStep] AS [Target]
USING (VALUES
  (1,1,210,NULL,N'[repo].[usp_sync_guid_RepoObject]',0,0,0,1,N'[repo].[usp_sync_guid_RepoObject]',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(2,1,310,NULL,N'[repo].[usp_sync_guid_RepoObjectColumn]',0,0,0,1,N'[repo].[usp_sync_guid_RepoObjectColumn]',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(3,2,210,NULL,N'[repo].[usp_sync_guid]',0,0,0,1,N'[repo].[usp_sync_guid]',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(4,2,300,NULL,N'(select [repo].[fs_get_parameter_value](''main enable usp_RepoObjectSource_FirstResultSet'', DEFAULT)) = 1',0,1,0,0,N'(select [repo].[fs_get_parameter_value](''main enable usp_RepoObjectSource_FirstResultSet'', DEFAULT)) = 1',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(5,2,310,300,N'[repo].[usp_RepoObjectSource_FirstResultSet]',0,0,0,1,N'[repo].[usp_RepoObjectSource_FirstResultSet]
--This can take a very long time',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(6,2,400,NULL,N'(select [repo].[fs_get_parameter_value](''main enable usp_RepoObject_update_SysObjectQueryPlan'', DEFAULT)) = 1',0,1,0,0,N'(select [repo].[fs_get_parameter_value](''main enable usp_RepoObject_update_SysObjectQueryPlan'', DEFAULT)) = 1',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(7,2,410,400,N'[repo].[usp_RepoObject_update_SysObjectQueryPlan]',0,0,0,1,N'[repo].[usp_RepoObject_update_SysObjectQueryPlan]
--This can take a very long time',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(8,2,500,NULL,N'(select [repo].[fs_get_parameter_value](''main enable usp_RepoObjectSource_QueryPlan'', DEFAULT)) = 1',0,1,0,0,N'(select [repo].[fs_get_parameter_value](''main enable usp_RepoObjectSource_QueryPlan'', DEFAULT)) = 1',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(9,2,510,500,N'[repo].[usp_RepoObjectSource_QueryPlan]
--This can take a very long time',0,0,0,1,N'[repo].[usp_RepoObjectSource_QueryPlan]
--This can take a very long time',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(10,2,610,NULL,N'[repo].[usp_update_Referencing_Count]',0,0,0,1,N'[repo].[usp_update_Referencing_Count]',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(11,2,710,NULL,N'[repo].[usp_index_inheritance]',0,0,0,1,N'[repo].[usp_index_inheritance]
--todo:
--should or could be executed several times until no new indexes are inherited',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(12,2,720,NULL,N'[repo].[usp_index_inheritance]',0,0,1,1,N'[repo].[usp_index_inheritance]',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(13,2,810,NULL,N'[repo].[usp_RepoObjectColumn_update_RepoObjectColumn_column_id]',0,0,0,1,N'[repo].[usp_RepoObjectColumn_update_RepoObjectColumn_column_id]
--This must happen later than the index logic, because the PK can change there. And this affects the order of the columns.',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(15,3,210,NULL,N'delete old usp, which doesn''t exist anymore',1,0,0,0,N'--ATTENTION, destructive!
--we should delete only usp definitions for persistence!
DELETE u
FROM [repo].[GeneratorUsp] [u]
WHERE LEFT([u].[usp_name], 12) = ''usp_PERSIST_''
 AND NOT EXISTS (
  SELECT 1
  FROM [repo].[RepoObject_gross] AS [ro]
  WHERE [u].[usp_schema] = [ro].[RepoObject_schema_name]
   AND [u].[usp_name] = [ro].[usp_persistence_name]
  )',N'[repo].[RepoObject_gross]',N' [repo].[GeneratorUsp]',N'd',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(16,3,310,NULL,N'insert new usp',1,0,0,0,N'INSERT INTO [repo].[GeneratorUsp] (
 [usp_schema]
 , [usp_name]
 , [has_logging]
 )
SELECT [usp_schema] = [RepoObject_schema_name]
 , [usp_name] = [usp_persistence_name]
 , 1
FROM [repo].[RepoObject_gross] AS ro
WHERE [is_persistence] = 1
 AND NOT EXISTS (
  SELECT 1
  FROM [repo].[GeneratorUsp] AS [u]
  WHERE [u].[usp_schema] = [ro].[RepoObject_schema_name]
   AND [u].[usp_name] = [ro].[usp_persistence_name]
  )',N'[repo].[RepoObject_gross]',N'[repo].[GeneratorUsp]',N'i',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(17,3,510,NULL,N'update steps, changed',1,0,0,0,N'UPDATE T
SET [Parent_Number] = [S].[Parent_Number]
 , [Name] = [S].[Name]
 , [has_logging] = [S].[has_logging]
 , [is_condition] = [S].[is_condition]
 , [is_SubProcedure] = [S].[is_SubProcedure]
 , [Statement] = [S].[Statement]
 , [log_source_object] = [S].[log_source_object]
 , [log_target_object] = [S].[log_target_object]
 , [log_flag_InsertUpdateDelete] = [S].[log_flag_InsertUpdateDelete]
FROM [repo].[GeneratorUspStep] [T]
INNER JOIN [repo].[GeneratorUspStep_Persistence] AS [S]
 ON [T].[usp_id] = [S].[usp_id]
  AND [T].[Number] = [S].[Number]
WHERE
 --
 [T].[Parent_Number] <> [S].[Parent_Number]
 OR [T].[Parent_Number] IS NULL
 AND NOT [S].[Parent_Number] IS NULL
 OR NOT [T].[Parent_Number] IS NULL
 AND [S].[Parent_Number] IS NULL
 --
 OR [T].[Name] <> [S].[Name]
 OR [T].[Name] IS NULL
 AND NOT [S].[Name] IS NULL
 OR NOT [T].[Name] IS NULL
 AND [S].[Name] IS NULL
 --
 OR [T].[has_logging] <> [S].[has_logging]
 OR [T].[has_logging] IS NULL
 AND NOT [S].[has_logging] IS NULL
 OR NOT [T].[has_logging] IS NULL
 AND [S].[has_logging] IS NULL
 --
 OR [T].[is_condition] <> [S].[is_condition]
 OR [T].[is_condition] IS NULL
 AND NOT [S].[is_condition] IS NULL
 OR NOT [T].[is_condition] IS NULL
 AND [S].[is_condition] IS NULL
 --
 OR [T].[is_SubProcedure] <> [S].[is_SubProcedure]
 OR [T].[is_SubProcedure] IS NULL
 AND NOT [S].[is_SubProcedure] IS NULL
 OR NOT [T].[is_SubProcedure] IS NULL
 AND [S].[is_SubProcedure] IS NULL
 --
 OR [T].[Statement] <> [S].[Statement]
 OR [T].[Statement] IS NULL
 AND NOT [S].[Statement] IS NULL
 OR NOT [T].[Statement] IS NULL
 AND [S].[Statement] IS NULL
 --
 OR [T].[log_source_object] <> [S].[log_source_object]
 OR [T].[log_source_object] IS NULL
 AND NOT [S].[log_source_object] IS NULL
 OR NOT [T].[log_source_object] IS NULL
 AND [S].[log_source_object] IS NULL
 --
 OR [T].[log_target_object] <> [S].[log_target_object]
 OR [T].[log_target_object] IS NULL
 AND NOT [S].[log_target_object] IS NULL
 OR NOT [T].[log_target_object] IS NULL
 AND [S].[log_target_object] IS NULL
 --
 OR [T].[log_flag_InsertUpdateDelete] <> [S].[log_flag_InsertUpdateDelete]
 OR [T].[log_flag_InsertUpdateDelete] IS NULL
 AND NOT [S].[log_flag_InsertUpdateDelete] IS NULL
 OR NOT [T].[log_flag_InsertUpdateDelete] IS NULL
 AND [S].[log_flag_InsertUpdateDelete] IS NULL',N'[repo].[GeneratorUspStep_Persistence]',N'[repo].[GeneratorUspStep]',N'u',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(18,3,610,NULL,N'insert steps, not existing',1,0,0,0,N'INSERT INTO [repo].[GeneratorUspStep] (
 [usp_id]
 , [Number]
 , [Parent_Number]
 , [Name]
 , [has_logging]
 , [is_condition]
 , [is_inactive]
 , [is_SubProcedure]
 , [Statement]
 , [log_source_object]
 , [log_target_object]
 , [log_flag_InsertUpdateDelete]
 )
--,[info_01]
--,[info_02]
--,[info_03]
--,[info_04]
--,[info_05]
--,[info_06]
--,[info_07]
--,[info_08]
--,[info_09]
SELECT [usp_id]
 , [Number]
 , [Parent_Number]
 , [Name]
 , [has_logging]
 , [is_condition]
 , [is_inactive]
 , [is_SubProcedure]
 , [Statement]
 , [log_source_object]
 , [log_target_object]
 , [log_flag_InsertUpdateDelete]
FROM [repo].[GeneratorUspStep_Persistence] AS S
WHERE NOT EXISTS (
  SELECT 1
  FROM [repo].[GeneratorUspStep] AS [T]
  WHERE [T].[usp_id] = [S].[usp_id]
   AND [T].[Number] = [S].[Number]
  )',N'[repo].[GeneratorUspStep_Persistence]',N'[repo].[GeneratorUspStep]',N'i',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(19,3,710,NULL,N'update steps; SET [is_inactive] = [setpoint].[is_inactive]',1,0,0,0,N'UPDATE step
SET [is_inactive] = [setpoint].[is_inactive]
FROM [repo].[GeneratorUspStep] [step]
INNER JOIN [repo].[GeneratorUspStep_Persistence_IsInactive_setpoint] [setpoint]
 ON [setpoint].[usp_id] = [step].[usp_id]
  AND [setpoint].[Number] = [step].[Number]
WHERE [setpoint].[is_inactive] <> [step].[is_inactive]',N'[repo].[GeneratorUspStep_Persistence_IsInactive_setpoint]',N'[repo].[GeneratorUspStep]',N'u',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(20,2,910,NULL,N'[repo].[usp_GeneratorUsp_insert_update_persistence]',0,0,0,1,N'[repo].[usp_GeneratorUsp_insert_update_persistence]
--RepoObjectColumn_column_id is required and should be updated before',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(21,4,100,NULL,N'check for empty source',0,1,1,0,N'(SELECT count(*) FROM [repo].[RepoObject_SqlModules_41_from]) = 0',N'[repo].[RepoObject_SqlModules_41_from]',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(22,4,110,100,N'ERROR 50110: persistence source is empty',0,0,0,0,N' THROW 50110
  , ''persistence source is empty: [repo].[RepoObject_SqlModules_41_from]''
  , 1;
',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(23,4,400,NULL,N'truncate persistence target',1,0,0,0,N'TRUNCATE TABLE [repo].[RepoObject_SqlModules_41_from_T]',NULL,N'[repo].[RepoObject_SqlModules_41_from_T]',N'D',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(24,4,800,NULL,N'insert all',1,0,0,0,N'INSERT INTO 
 [repo].[RepoObject_SqlModules_41_from_T]
 (
  [children]
, [class]
, [identifier_alias]
, [identifier_name]
, [is_from]
, [is_group]
, [is_join]
, [is_keyword]
, [is_whitespace]
, [join_type]
, [json_key]
, [Min_RowNumber_From]
, [Min_RowNumber_GroupBy]
, [Min_RowNumber_Where]
, [normalized]
, [normalized_PatIndex_Select]
, [normalized_wo_nolock]
, [patindex_nolock]
, [RepoObject_guid]
, [RowNumber_per_Object]
, [SysObject_fullname]
)
SELECT
  [children]
, [class]
, [identifier_alias]
, [identifier_name]
, [is_from]
, [is_group]
, [is_join]
, [is_keyword]
, [is_whitespace]
, [join_type]
, [json_key]
, [Min_RowNumber_From]
, [Min_RowNumber_GroupBy]
, [Min_RowNumber_Where]
, [normalized]
, [normalized_PatIndex_Select]
, [normalized_wo_nolock]
, [patindex_nolock]
, [RepoObject_guid]
, [RowNumber_per_Object]
, [SysObject_fullname]

FROM [repo].[RepoObject_SqlModules_41_from] AS S',N'[repo].[RepoObject_SqlModules_41_from]',N'[repo].[RepoObject_SqlModules_41_from_T]',N'I',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(25,5,100,NULL,N'check for empty source',0,1,1,0,N'(SELECT count(*) FROM [repo].[IndexColumn_ReferencedReferencing_HasFullColumnsInReferencing]) = 0',N'[repo].[IndexColumn_ReferencedReferencing_HasFullColumnsInReferencing]',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(26,5,110,100,N'ERROR 50110: persistence source is empty',0,0,0,0,N' THROW 50110
  , ''persistence source is empty: [repo].[IndexColumn_ReferencedReferencing_HasFullColumnsInReferencing]''
  , 1;
',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(27,5,400,NULL,N'truncate persistence target',1,0,0,0,N'TRUNCATE TABLE [repo].[IndexColumn_ReferencedReferencing_HasFullColumnsInReferencing_T]',NULL,N'[repo].[IndexColumn_ReferencedReferencing_HasFullColumnsInReferencing_T]',N'D',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(28,5,800,NULL,N'insert all',1,0,0,0,N'INSERT INTO 
 [repo].[IndexColumn_ReferencedReferencing_HasFullColumnsInReferencing_T]
 (
  [index_column_id]
, [index_guid]
, [is_descending_key]
, [referenced_RepoObject_guid]
, [referenced_RepoObjectColumn_guid]
, [referencing_RepoObject_guid]
, [referencing_RepoObjectColumn_guid]
, [RowNumberInReferencing]
)
SELECT
  [index_column_id]
, [index_guid]
, [is_descending_key]
, [referenced_RepoObject_guid]
, [referenced_RepoObjectColumn_guid]
, [referencing_RepoObject_guid]
, [referencing_RepoObjectColumn_guid]
, [RowNumberInReferencing]

FROM [repo].[IndexColumn_ReferencedReferencing_HasFullColumnsInReferencing] AS S',N'[repo].[IndexColumn_ReferencedReferencing_HasFullColumnsInReferencing]',N'[repo].[IndexColumn_ReferencedReferencing_HasFullColumnsInReferencing_T]',N'I',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(30,6,100,NULL,N'intro',0,0,0,0,N'/*
ATTENTION!
Column guid syncronization requires existing RepoObject guid synchronization (all RepoObject in the database need a RepoObject_guid)
because RepoObject_guid is used to join
	
=>
[repo_sys].[usp_sync_guid_RepoObject]
must be executed _before_ to ensure all RepoObject guid are synchronized
*/',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(31,4,210,NULL,N'UPDATE repo_sys.SysColumn_RepoObjectColumn_via_RepoObjectColumn_guid',1,0,0,0,N'/*
use objects with [RepoObjectColumn_guid] stored in extended properties
	
- SysObjectColumn could be renamed after previous sync
	- => update SysObjectColum properties in RepoObjectColumn
	- don''t change RepoObjectColumn names
*/
UPDATE repo.SysColumn_RepoObjectColumn_via_guid
SET [SysObjectColumn_name] = [SysObject_column_name]
 , [SysObjectColumn_column_id] = [SysObject_column_id]
 , [RepoObject_guid] = [SysObject_RepoObject_guid]
WHERE NOT [RepoObjectColumn_guid] IS NULL
 AND (
  --
  [SysObjectColumn_name] <> [SysObject_column_name]
  OR [SysObjectColumn_name] IS NULL
  OR [SysObjectColumn_column_id] <> [SysObject_column_id]
  OR [SysObjectColumn_column_id] IS NULL
  OR [RepoObject_guid] <> [SysObject_RepoObject_guid]
  ----
  );',N'[repo_sys].[SysColumn]',N'[repo].[RepoObjectColumn]',N'u',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(32,6,310,NULL,N'SET [SysObjectColumn_name] = [RepoObjectColumn_guid] (to avoid conflict in the next INSERT step)',1,0,0,0,N'/*
in case of possible conflict when inserting missing guid because auf [UK_RepoObjectColumn__SysNames] conflicting entries get 
[SysObjectColumn_name] = [repo].[RepoObjectColumn].[RepoObjectColumn_guid]
this will allow INSERT in the next step without issues
*/
UPDATE repo.RepoObjectColumn
SET [SysObjectColumn_name] = [repo].[RepoObjectColumn].[RepoObjectColumn_guid]
FROM [repo].[RepoObjectColumn]
INNER JOIN (
 SELECT [SysObject_id]
  , [SysObject_RepoObject_guid]
  , [SysObject_schema_name]
  , [SysObject_name]
  , [SysObject_column_name]
  , [SysObjectColumn_column_id]
  , [SysObject_RepoObjectColumn_guid]
  , [RepoObject_guid]
  , [RepoObjectColumn_guid]
 FROM [repo].[SysColumn_RepoObjectColumn_via_guid]
 WHERE
  --SysObjectColumns, which exists in database and have a RepoObjectColumn_guid assigned in extended properties 
  NOT [SysObject_RepoObjectColumn_guid] IS NULL
  --but the have not yet a RepoObjectColumn_guid assigned in [repo].[RepoObjectColumns] 
  AND [RepoObjectColumn_guid] IS NULL
 ) AS [missing_guid]
 ON [repo].[RepoObjectColumn].[RepoObject_guid] = [missing_guid].[RepoObject_guid]
  AND [repo].[RepoObjectColumn].[SysObjectColumn_name] = [missing_guid].[SysObject_column_name]',N'[repo].[RepoObjectColumn]',N'[repo].[RepoObjectColumn]',N'u',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(33,6,410,NULL,N'[SysObject_RepoObjectColumn_guid] -> [RepoObjectColumn_guid] ([RepoObjectColumn_guid] is stored in extended properties)',1,0,0,0,N'/*
	
if a [RepoObjectColumn_guid] is stored in extended properties but missing in RepoObjectColumn, it should be restored
use columns with [RepoObjectColumn_guid] stored in extended properties
	
- restore / insert RepoObjectColumn_guid from [SysObject_RepoObjectColumn_guid]
- SysObjectColumn names are restored as SysObject names
- a conflict could happen when some RepoObjectColumn have been renamed and when they now conflict with SysObjectColumn names  
	[UK_RepoObject_Names] was defined to raise an error
	=> thats way we use [RepoObjectColumn_guid] as [RepoObjectColumn_name] to avoid conflicts we will later rename [RepoObjectColumn_name] to [SysObjectColumn_name] where this is possible
	
*/
INSERT INTO repo.RepoObjectColumn (
 [RepoObjectColumn_guid]
 , [RepoObject_guid]
 , [SysObjectColumn_name]
 , [SysObjectColumn_column_id]
 , [RepoObjectColumn_name]
 , [Repo_default_is_system_named]
 , [Repo_default_name]
 , [Repo_default_definition]
 , [Repo_definition]
 , [Repo_generated_always_type]
 , [Repo_graph_type]
 , [Repo_is_computed]
 , [Repo_is_identity]
 , [Repo_is_nullable]
 , [Repo_is_persisted]
 , [Repo_seed_value]
 , [Repo_increment_value]
 , [Repo_user_type_name]
 , [Repo_user_type_fullname]
 , [Repo_uses_database_collation]
 )
SELECT [SysObject_RepoObjectColumn_guid]
 , [SysObject_RepoObject_guid]
 , [SysObject_column_name]
 , [SysObject_column_id]
 , [SysObject_RepoObjectColumn_guid] AS [RepoObjectColumn_name] --guid is used as name!
 , [default_is_system_named]
 , [default_name]
 , [default_definition]
 , [definition]
 , [generated_always_type]
 , [graph_type]
 , [graph_type]
 , [is_computed]
 , [is_nullable]
 , [is_persisted]
 , [seed_value]
 , [increment_value]
 , [user_type_name]
 , [user_type_fullname]
 , [uses_database_collation]
FROM repo.SysColumn_RepoObjectColumn_via_guid
WHERE [RepoObjectColumn_guid] IS NULL
 AND NOT [SysObject_RepoObjectColumn_guid] IS NULL;',N'[repo_sys].[SysColumn]',N'[repo].[RepoObjectColumn]',N'i',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(34,6,510,NULL,N'DELETE repo.RepoObjectColumn, WHERE (RowNumberOverName > 1); via [repo].[SysColumn_RepoObjectColumn_via_name]',1,0,0,0,N'--in case we have more then one [RepoObjectColumn_guid] per Schema.Object.Column
DELETE roc
FROM [repo].[RepoObjectColumn] [roc]
WHERE EXISTS (
  SELECT [RepoObjectColumn_guid]
   , [RowNumberOverName]
  FROM [repo].[SysColumn_RepoObjectColumn_via_name] AS [scroc]
  WHERE ([RowNumberOverName] > 1)
   AND [roc].[RepoObjectColumn_guid] = [scroc].[RepoObjectColumn_guid]
  )',N'[repo_sys].[SysColumn]',N'[repo].[RepoObjectColumn]',N'd',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(35,6,610,NULL,N'INSERT still missing Column',1,0,0,0,N'/*
	
ensure all object columns existing in database (as SysObjectColumn) are also included into [repo].[RepoObjectColumn]
	
- this should be SysObjectColm without RepoObjectColumn_guid in extended properties
- when inserting they get a RepoObjectColumn_guid
- we should use this new RepoObjectColumn_guid as [RepoObjectColumn_name], but we don''t know it, when we insert. That''s why we use anything else unique: NEWID()  
	or we don''t insert the RepoObjectColumn_name and they get a NEWID() as default, defined in repo.RepoObjectColumn
	
[SysObject_RepoObject_guid] must exists, because it is required to link to repo.RepoObject
*/
INSERT INTO repo.RepoObjectColumn (
 [RepoObject_guid]
 , [SysObjectColumn_name]
 , [SysObjectColumn_column_id]
 --, [RepoObjectColumn_name]
 , [Repo_default_is_system_named]
 , [Repo_default_name]
 , [Repo_default_definition]
 , [Repo_definition]
 , [Repo_generated_always_type]
 , [Repo_graph_type]
 , [Repo_is_computed]
 , [Repo_is_identity]
 , [Repo_is_nullable]
 , [Repo_is_persisted]
 , [Repo_seed_value]
 , [Repo_increment_value]
 , [Repo_user_type_name]
 , [Repo_user_type_fullname]
 , [Repo_uses_database_collation]
 )
SELECT [SysObject_RepoObject_guid]
 , [SysObject_column_name]
 , [SysObject_column_id]
 --, NEWID() AS [RepoObjectColumn_name] --a default is defined now
 , [default_is_system_named]
 , [default_name]
 , [default_definition]
 , [definition]
 , [generated_always_type]
 , [graph_type]
 , [is_computed]
 , [is_identity]
 , [is_nullable]
 , [is_persisted]
 , [seed_value]
 , [increment_value]
 , [user_type_name]
 , [user_type_fullname]
 , [uses_database_collation]
FROM repo.SysColumn_RepoObjectColumn_via_name
WHERE [RepoObjectColumn_guid] IS NULL
 AND NOT [SysObject_RepoObject_guid] IS NULL;',N'[repo_sys].[SysColumn]',N'[repo].[RepoObjectColumn]',N'i',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(36,6,710,NULL,N'SET [RepoObjectColumn_name] = [SysObjectColumn_name] WHERE (has_different_sys_names = 1) AND (ISNULL(is_repo_managed, 0) = 0)',1,0,0,0,N'/*
	
now we try to set [RepoObject_name] = [SysObject_name] where this is possible whithout conflicts
remaining [RepoObject_name] still have some guid and this needs to solved separately
	
poosible issue
	
Msg 2627, Level 14, State 1, Procedure repo.usp_sync_guid_RepoObjectColumn, Line 392 [Batch Start Line 5]
Violation of UNIQUE KEY constraint ''UK_RepoObjectColumn__RepoNames''. Cannot insert duplicate key in object ''repo.RepoObjectColumn''. The duplicate key value is (e7968530-e846-eb11-84d1-a81e8446d5b0, Repo_default_definition).
	
there was an issue in [repo].[SysColumn] with some column duplicating
	
*/
UPDATE repo.RepoObjectColumn
SET [RepoObjectColumn_name] = [repo].[RepoObjectColumn].[SysObjectColumn_name]
FROM [repo].[RepoObjectColumn]
INNER JOIN [repo].[RepoObject] AS [ro]
 ON [repo].[RepoObjectColumn].[RepoObject_guid] = [ro].[RepoObject_guid]
WHERE
 --don''t touch entries, which are managed by repo
 ISNULL([ro].[is_repo_managed], 0) = 0
 AND [repo].[RepoObjectColumn].[has_different_sys_names] = 1
 --exclude surrogate [SysObject_name]
 AND [is_SysObjectColumn_name_uniqueidentifier] = 0
 --exclude virtual columns, created from reference expressions
 AND ISNULL([is_query_plan_expression], 0) = 0
 --avoid not unique entries
 --do not update, if the target entry ([RepoObject_guid], [RepoObjectColumn_name]) exists
 --The UK would prevent that
 AND NOT EXISTS (
  SELECT [RepoObject_guid]
   , [RepoObjectColumn_name]
  FROM [repo].[RepoObjectColumn] AS [roc2]
  WHERE [repo].[RepoObjectColumn].[SysObjectColumn_name] = [roc2].[RepoObjectColumn_name]
   AND [repo].[RepoObjectColumn].[RepoObject_guid] = [roc2].[RepoObject_guid]
  )',N'[repo].[RepoObjectColumn]',N'[repo].[RepoObjectColumn]',N'u',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(37,6,810,NULL,N'other properties, where (ISNULL(is_repo_managed, 0) = 0)',1,0,0,0,N'--update other properties for RepoObject which are not is_repo_managed
UPDATE repo.SysColumn_RepoObjectColumn_via_guid
SET [Repo_default_definition] = [default_definition]
 , [Repo_default_is_system_named] = [default_is_system_named]
 , [Repo_default_name] = [default_name]
 , [Repo_definition] = [definition]
 , [Repo_generated_always_type] = [generated_always_type]
 , [Repo_graph_type] = [graph_type]
 , [Repo_is_nullable] = [is_nullable]
 , [Repo_is_persisted] = [is_persisted]
 , [Repo_user_type_fullname] = [user_type_fullname]
 , [Repo_user_type_name] = [user_type_name]
 , [Repo_uses_database_collation] = [uses_database_collation]
 , [Repo_is_computed] = [is_computed]
 , [Repo_is_identity] = [is_identity]
 , [Repo_seed_value] = [seed_value]
 , [Repo_increment_value] = [increment_value]
WHERE
 --not is_repo_managed 
 ISNULL([is_repo_managed], 0) = 0
 AND (
  --
  1 = 0
  --
  OR [Repo_default_definition] <> [default_definition]
  OR (
   [Repo_default_definition] IS NULL
   AND NOT [default_definition] IS NULL
   )
  OR (
   NOT [Repo_default_definition] IS NULL
   AND [default_definition] IS NULL
   )
  OR [Repo_default_is_system_named] <> [default_is_system_named]
  OR (
   [Repo_default_is_system_named] IS NULL
   AND NOT [default_is_system_named] IS NULL
   )
  OR (
   NOT [Repo_default_is_system_named] IS NULL
   AND [default_is_system_named] IS NULL
   )
  OR [Repo_default_name] <> [default_name]
  OR (
   [Repo_default_name] IS NULL
   AND NOT [default_name] IS NULL
   )
  OR (
   NOT [Repo_default_name] IS NULL
   AND [default_name] IS NULL
   )
  OR [Repo_definition] <> [definition]
  OR (
   [Repo_definition] IS NULL
   AND NOT [definition] IS NULL
   )
  OR (
   NOT [Repo_definition] IS NULL
   AND [definition] IS NULL
   )
  OR [Repo_generated_always_type] <> [generated_always_type]
  OR (
   [Repo_generated_always_type] IS NULL
   AND NOT [generated_always_type] IS NULL
   )
  OR (
   NOT [Repo_generated_always_type] IS NULL
   AND [generated_always_type] IS NULL
   )
  OR [Repo_graph_type] <> [graph_type]
  OR (
   [Repo_graph_type] IS NULL
   AND NOT [graph_type] IS NULL
   )
  OR (
   NOT [Repo_graph_type] IS NULL
   AND [graph_type] IS NULL
   )
  OR [Repo_is_nullable] <> [is_nullable]
  OR (
   [Repo_is_nullable] IS NULL
   AND NOT [is_nullable] IS NULL
   )
  OR (
   NOT [Repo_is_nullable] IS NULL
   AND [is_nullable] IS NULL
   )
  OR [Repo_is_persisted] <> [is_persisted]
  OR (
   [Repo_is_persisted] IS NULL
   AND NOT [is_persisted] IS NULL
   )
  OR (
   NOT [Repo_is_persisted] IS NULL
   AND [is_persisted] IS NULL
   )
  OR [Repo_user_type_fullname] <> [user_type_fullname]
  OR (
   [Repo_user_type_fullname] IS NULL
   AND NOT [user_type_fullname] IS NULL
   )
  OR (
   NOT [Repo_user_type_fullname] IS NULL
   AND [user_type_fullname] IS NULL
   )
  --OR [Repo_user_type_name] <> [user_type_name]
  --OR ([Repo_user_type_name] IS NULL
  --    AND NOT [user_type_name] IS NULL)
  --OR (NOT [Repo_user_type_name] IS NULL
  --    AND [user_type_name] IS NULL)
  OR [Repo_uses_database_collation] <> [uses_database_collation]
  OR (
   [Repo_uses_database_collation] IS NULL
   AND NOT [uses_database_collation] IS NULL
   )
  OR (
   NOT [Repo_uses_database_collation] IS NULL
   AND [uses_database_collation] IS NULL
   )
  OR [Repo_is_computed] <> [is_computed]
  OR (
   [Repo_is_computed] IS NULL
   AND NOT [is_computed] IS NULL
   )
  OR (
   NOT [Repo_is_computed] IS NULL
   AND [is_computed] IS NULL
   )
  OR [Repo_is_identity] <> [is_identity]
  OR (
   [Repo_is_identity] IS NULL
   AND NOT [is_identity] IS NULL
   )
  OR (
   NOT [Repo_is_identity] IS NULL
   AND [is_identity] IS NULL
   )
  OR [Repo_seed_value] <> [seed_value]
  OR (
   [Repo_seed_value] IS NULL
   AND NOT [seed_value] IS NULL
   )
  OR (
   NOT [Repo_seed_value] IS NULL
   AND [seed_value] IS NULL
   )
  OR [Repo_increment_value] <> [increment_value]
  OR (
   [Repo_increment_value] IS NULL
   AND NOT [increment_value] IS NULL
   )
  OR (
   NOT [Repo_increment_value] IS NULL
   AND [increment_value] IS NULL
   )
  --
  );',N'[repo_sys].[SysColumn]',N'[repo].[RepoObjectColumn]',N'u',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(38,6,1010,NULL,N'persistence: update RepoObjectColumn_name and repo attributes from sys attributes of persistence_source_RepoObjectColumn_guid',1,0,0,0,N'--persistence: update RepoObjectColumn_name (and other repo attributes) from SysObjecColumn_name (and other sys attributes) of persistence_source_RepoObjectColumn_guid
UPDATE roc_p
SET [RepoObjectColumn_name] = [scroc].[SysObjectColumn_name]
 --
 , [Repo_default_definition] = [scroc].[default_definition]
 --skip Repo_default_name
 --skip Repo_default_is_system_named
 --, [Repo_default_is_system_named] = [scroc].[default_is_system_named]
 , [Repo_definition] = [scroc].[definition]
 , [Repo_generated_always_type] = [scroc].[generated_always_type]
 , [Repo_graph_type] = [scroc].[graph_type]
 , [Repo_is_nullable] = [scroc].[is_nullable]
 , [Repo_is_persisted] = [scroc].[is_persisted]
 , [Repo_user_type_fullname] = [scroc].[user_type_fullname]
 , [Repo_user_type_name] = [scroc].[user_type_name]
 , [Repo_uses_database_collation] = [scroc].[uses_database_collation]
 , [Repo_is_computed] = [scroc].[is_computed]
 , [Repo_is_identity] = [scroc].[is_identity]
 , [Repo_seed_value] = [scroc].[seed_value]
 , [Repo_increment_value] = [scroc].[increment_value]
FROM [repo].[RepoObjectColumn] [roc_p]
--we need some attributes from roc_s (source)
INNER JOIN [repo].[SysColumn_RepoObjectColumn_via_guid] [scroc]
 ON [scroc].[RepoObjectColumn_guid] = [roc_p].[persistence_source_RepoObjectColumn_guid]
INNER JOIN [repo].[RepoObject] [ro_p]
 ON [roc_p].[RepoObject_guid] = [ro_p].[RepoObject_guid]
WHERE
 --persistence object ist marked [is_repo_managed] = 1
 [ro_p].[is_repo_managed] = 1
 AND (
  --
  1 = 0
  --
  OR [roc_p].[RepoObjectColumn_name] <> [scroc].[SysObjectColumn_name]
  --
  OR [roc_p].[Repo_default_definition] <> [scroc].[default_definition]
  OR (
   [roc_p].[Repo_default_definition] IS NULL
   AND NOT [scroc].[default_definition] IS NULL
   )
  OR (
   NOT [roc_p].[Repo_default_definition] IS NULL
   AND [scroc].[default_definition] IS NULL
   )
  --OR [roc_p].[Repo_default_is_system_named] <> [scroc].[default_is_system_named]
  --OR ([roc_p].[Repo_default_is_system_named] IS NULL
  --    AND NOT [scroc].[default_is_system_named] IS NULL)
  --OR (NOT [roc_p].[Repo_default_is_system_named] IS NULL
  --    AND [scroc].[default_is_system_named] IS NULL)
  OR [roc_p].[Repo_definition] <> [scroc].[definition]
  OR (
   [roc_p].[Repo_definition] IS NULL
   AND NOT [scroc].[definition] IS NULL
   )
  OR (
   NOT [roc_p].[Repo_definition] IS NULL
   AND [scroc].[definition] IS NULL
   )
  OR [roc_p].[Repo_generated_always_type] <> [scroc].[generated_always_type]
  OR (
   [roc_p].[Repo_generated_always_type] IS NULL
   AND NOT [scroc].[generated_always_type] IS NULL
   )
  OR (
   NOT [roc_p].[Repo_generated_always_type] IS NULL
   AND [scroc].[generated_always_type] IS NULL
   )
  OR [roc_p].[Repo_graph_type] <> [scroc].[graph_type]
  OR (
   [roc_p].[Repo_graph_type] IS NULL
   AND NOT [scroc].[graph_type] IS NULL
   )
  OR (
   NOT [roc_p].[Repo_graph_type] IS NULL
   AND [scroc].[graph_type] IS NULL
   )
  OR [roc_p].[Repo_is_nullable] <> [scroc].[is_nullable]
  OR (
   [roc_p].[Repo_is_nullable] IS NULL
   AND NOT [scroc].[is_nullable] IS NULL
   )
  OR (
   NOT [roc_p].[Repo_is_nullable] IS NULL
   AND [scroc].[is_nullable] IS NULL
   )
  OR [roc_p].[Repo_is_persisted] <> [scroc].[is_persisted]
  OR (
   [roc_p].[Repo_is_persisted] IS NULL
   AND NOT [scroc].[is_persisted] IS NULL
   )
  OR (
   NOT [roc_p].[Repo_is_persisted] IS NULL
   AND [scroc].[is_persisted] IS NULL
   )
  OR [roc_p].[Repo_user_type_fullname] <> [scroc].[user_type_fullname]
  OR (
   [roc_p].[Repo_user_type_fullname] IS NULL
   AND NOT [scroc].[user_type_fullname] IS NULL
   )
  OR (
   NOT [roc_p].[Repo_user_type_fullname] IS NULL
   AND [scroc].[user_type_fullname] IS NULL
   )
  --we don''t need to check user_type_name, it is included in user_type_fullname
  OR [roc_p].[Repo_uses_database_collation] <> [scroc].[uses_database_collation]
  OR (
   [roc_p].[Repo_uses_database_collation] IS NULL
   AND NOT [scroc].[uses_database_collation] IS NULL
   )
  OR (
   NOT [roc_p].[Repo_uses_database_collation] IS NULL
   AND [scroc].[uses_database_collation] IS NULL
   )
  OR [roc_p].[Repo_is_computed] <> [scroc].[is_computed]
  OR (
   [roc_p].[Repo_is_computed] IS NULL
   AND NOT [scroc].[is_computed] IS NULL
   )
  OR (
   NOT [roc_p].[Repo_is_computed] IS NULL
   AND [scroc].[is_computed] IS NULL
   )
  OR [roc_p].[Repo_is_identity] <> [scroc].[is_identity]
  OR (
   [roc_p].[Repo_is_identity] IS NULL
   AND NOT [scroc].[is_identity] IS NULL
   )
  OR (
   NOT [roc_p].[Repo_is_identity] IS NULL
   AND [scroc].[is_identity] IS NULL
   )
  OR [roc_p].[Repo_seed_value] <> [scroc].[seed_value]
  OR (
   [roc_p].[Repo_seed_value] IS NULL
   AND NOT [scroc].[seed_value] IS NULL
   )
  OR (
   NOT [roc_p].[Repo_seed_value] IS NULL
   AND [scroc].[seed_value] IS NULL
   )
  OR [roc_p].[Repo_increment_value] <> [scroc].[increment_value]
  OR (
   [roc_p].[Repo_increment_value] IS NULL
   AND NOT [scroc].[increment_value] IS NULL
   )
  OR (
   NOT [roc_p].[Repo_increment_value] IS NULL
   AND [scroc].[increment_value] IS NULL
   )
  )',N'[repo_sys].[SysColumn]',N'[repo].[RepoObjectColumn]',N'u',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(39,6,1110,NULL,N'persistence: [roc_p].[persistence_source_RepoObjectColumn_guid] = [roc_s].[RepoObjectColumn_guid] (matching by column name via [repo].[RepoObject_persistence])',1,0,0,0,N'--persistence: try to find [persistence_source_RepoObjectColumn_guid] for existing persistence columns by Column name
UPDATE roc_p
SET [roc_p].[persistence_source_RepoObjectColumn_guid] = [roc_s].[RepoObjectColumn_guid]
FROM [repo].[RepoObjectColumn] AS [roc_p]
INNER JOIN [repo].[RepoObjectColumn] AS [roc_s]
 ON [roc_p].[RepoObjectColumn_name] = [roc_s].[RepoObjectColumn_name]
INNER JOIN [repo].[RepoObject_persistence] rop
 ON rop.target_RepoObject_guid = [roc_p].[RepoObject_guid]
  AND rop.source_RepoObject_guid = [roc_s].[RepoObject_guid]
WHERE (
  [roc_p].[persistence_source_RepoObjectColumn_guid] <> [roc_s].[RepoObjectColumn_guid]
  OR [roc_p].[persistence_source_RepoObjectColumn_guid] IS NULL
  )
 --skip special table columns (ValidFrom, ValidTo) in target (= persistence)
 AND (
  [roc_p].[Repo_generated_always_type] = 0
  OR [roc_p].[Repo_generated_always_type] IS NULL
  )
 --skip [is_query_plan_expression] in target
 AND (
  [roc_p].[is_query_plan_expression] = 0
  OR [roc_p].[is_query_plan_expression] IS NULL
  )',N'[repo].[RepoObjectColumn]',N'[repo].[RepoObjectColumn]',N'u',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(40,6,1210,NULL,N'persistence: add missing persistence columns existing in source',1,0,0,0,N'--persistence: add missing (in target) persistence columns, existing in source
--before the persistence sql can be created the [repo].[usp_sync_guid_RepoObjectColumn] needs to be executed again
INSERT INTO [repo].[RepoObjectColumn] (
 [RepoObject_guid]
 , [RepoObjectColumn_name]
 , [persistence_source_RepoObjectColumn_guid]
 )
SELECT rop.[target_RepoObject_guid]
 , [roc_s].[RepoObjectColumn_name]
 , [roc_s].[RepoObjectColumn_guid]
FROM [repo].[RepoObjectColumn] AS [roc_s]
INNER JOIN [repo].[RepoObject_persistence] rop
 ON rop.source_RepoObject_guid = [roc_s].[RepoObject_guid]
WHERE
 --
 NOT EXISTS (
  SELECT 1
  FROM [repo].[RepoObjectColumn] AS [roc_p]
  WHERE [roc_p].[RepoObject_guid] = rop.[target_RepoObject_guid]
   AND [roc_p].[persistence_source_RepoObjectColumn_guid] = [roc_s].[RepoObjectColumn_guid]
  )
 --skip is_persistence_no_include
 AND (
  [roc_s].is_persistence_no_include = 0
  OR [roc_s].is_persistence_no_include IS NULL
  )
 --skip special table columns (ValidFrom, ValidTo) in source
 AND (
  [roc_s].[Repo_generated_always_type] = 0
  OR [roc_s].[Repo_generated_always_type] IS NULL
  )
 --skip [is_query_plan_expression] in source
 AND (
  [roc_s].[is_query_plan_expression] = 0
  OR [roc_s].[is_query_plan_expression] IS NULL
  )',N'[repo].[RepoObjectColumn]',N'[repo].[RepoObjectColumn]',N'i',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(41,6,1310,NULL,N'persistence: insert missing HistValidColumns',1,0,0,0,N'--currently we only insert missing but not delete not required
-- maybe we should delete them?
INSERT INTO [repo].[RepoObjectColumn] (
 [Repo_generated_always_type]
 , [Repo_is_nullable]
 , [Repo_user_type_name]
 , [Repo_user_type_fullname]
 , [RepoObjectColumn_name]
 , [RepoObject_guid]
 )
SELECT [Repo_generated_always_type]
 , [Repo_is_nullable]
 , [Repo_user_type_name]
 , [Repo_user_type_fullname]
 , [RepoObjectColumn_name]
 , [RepoObject_guid]
FROM [repo].[RepoObjectColumn_HistValidColums_setpoint] AS setpoint
WHERE NOT EXISTS (
  SELECT 1
  FROM [repo].[RepoObjectColumn] AS [roc]
  WHERE [roc].[RepoObject_guid] = [setpoint].[RepoObject_guid]
   --we link not by ColumnName, but by [Repo_generated_always_type]
   --this way it is possible to change the name in [repo].[RepoObjectColumn], if required
   AND [roc].[Repo_generated_always_type] = [setpoint].[Repo_generated_always_type]
  )',N'[repo].[RepoObject_persistence]',N'[repo].[RepoObjectColumn]',N'i',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(42,6,1410,NULL,N'persistence: SET [persistence_source_RepoObjectColumn_guid] = NULL (missing source column)',1,0,0,0,N'UPDATE roc
SET [persistence_source_RepoObjectColumn_guid] = NULL
FROM [repo].[RepoObjectColumn] roc
WHERE NOT EXISTS (
  SELECT [RepoObjectColumn_guid]
  FROM [repo].[RepoObjectColumn] roc_s
  WHERE roc_s.[RepoObjectColumn_guid] = roc.[persistence_source_RepoObjectColumn_guid]
  )',N'[repo].[RepoObjectColumn]',N'[repo].[RepoObjectColumn]',N'u',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(43,6,2010,NULL,N'write RepoObjectColumn_guid into extended properties of SysObjectColumn, Level2',1,0,0,0,N'DECLARE property_cursor CURSOR READ_ONLY
FOR
--
SELECT [T1].[RepoObjectColumn_guid]
 , [T1].[SysObject_schema_name]
 , [T2].[level1type]
 , [T1].[SysObject_name]
 , [T1].[SysObject_column_name]
 , [T1].[SysObject_type]
FROM repo.SysColumn_RepoObjectColumn_via_name AS T1
INNER JOIN repo.[type_level1type_level2type] AS T2
 ON T1.SysObject_type = T2.type
WHERE NOT [T1].[RepoObjectColumn_guid] IS NULL
 AND [T1].[SysObject_RepoObjectColumn_guid] IS NULL
 AND NOT [T2].[level1type] IS NULL
 --SchemaCompare has issues comparing extended properties for graph table columns, we exclude them
 AND T1.Repo_graph_type IS NULL
 --the next is redundant, these kind of Objects should not exist in the database
 AND [T1].[is_SysObjectColumn_name_uniqueidentifier] = 0

DECLARE @RepoObjectColumn_guid UNIQUEIDENTIFIER
 , @column_name NVARCHAR(128)
 , @schema_name NVARCHAR(128)
 , @level1type VARCHAR(128)
 , @name NVARCHAR(128)
 , @type CHAR(2)

SET @rows = 0;

OPEN property_cursor;

FETCH NEXT
FROM property_cursor
INTO @RepoObjectColumn_guid
 , @schema_name
 , @level1type
 , @name
 , @column_name
 , @type;

WHILE @@fetch_status <> - 1
BEGIN
 IF @@fetch_status <> - 2
 BEGIN
  EXEC repo_sys.[usp_AddOrUpdateExtendedProperty] @name = N''RepoObjectColumn_guid''
   , @value = @RepoObjectColumn_guid
   , @level0type = N''Schema''
   , @level0name = @schema_name
   , @level1type = @level1type
   , @level1name = @name
   , @level2type = N''COLUMN''
   , @level2name = @column_name;

  SET @rows = @rows + 1;
 END;

 FETCH NEXT
 FROM property_cursor
 INTO @RepoObjectColumn_guid
  , @schema_name
  , @level1type
  , @name
  , @column_name
  , @type;
END;

CLOSE property_cursor;

DEALLOCATE property_cursor;',N'[repo].[RepoObjectColumn]',N'[repo_sys].[SysColumn]',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(44,6,2110,NULL,N'SET [is_SysObjectColumn_missing] = 1',1,0,0,0,N'/*
columns deleted or renamed in database but still referenced in [repo].[RepoObjectColumn] should be marked: [is_SysObjectColumn_missing] = 1
*/
UPDATE repo.RepoObjectColumn
SET [is_SysObjectColumn_missing] = 1
FROM [repo].[RepoObjectColumn] [T1]
WHERE ISNULL([is_SysObjectColumn_missing], 0) = 0
 AND NOT EXISTS (
  SELECT [SysObject_id]
  FROM [repo_sys].[SysColumn] AS [Filter]
  WHERE [t1].[SysObjectColumn_name] = [Filter].[SysObject_column_name]
   AND [T1].[RepoObject_guid] = [Filter].[SysObject_RepoObject_guid]
  )',N'[repo_sys].[SysColumn]',N'[repo].[RepoObjectColumn]',N'u',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(45,6,2210,NULL,N'where is_SysObjectColumn_missing = 1, but not in objects which are is_repo_managed',1,0,0,0,N'/*
delete columns, marked as missing in [repo_sys].SysColumn
which are not [is_repo_managed]
*/
DELETE
FROM repo.RepoObjectColumn
FROM [repo].[RepoObjectColumn]
INNER JOIN [repo].[RepoObject] AS [ro]
 ON [repo].[RepoObjectColumn].[RepoObject_guid] = [ro].[RepoObject_guid]
WHERE ISNULL([ro].[is_repo_managed], 0) = 0
 AND [repo].[RepoObjectColumn].[is_SysObjectColumn_missing] = 1
 --do not delete virtual colums required for source reference analysis
 AND ISNULL([repo].[RepoObjectColumn].[is_query_plan_expression], 0) = 0',N'[repo_sys].[RepoObjectColumn]',N'[repo].[RepoObjectColumn]',N'd',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(46,12,410,NULL,N'repo.RepoObjectColumnProperty - INSERT',1,0,0,0,N'INSERT INTO repo.RepoObjectColumnProperty (
 [RepoObjectColumn_guid]
 , [property_name]
 , [property_value]
 )
SELECT DISTINCT [RepoObjectColumn_guid]
 , [property_name]
 , [property_value]
FROM repo.RepoObjectColumnProperty_sys_repo AS T1
WHERE [RepoObjectColumnProperty_id] IS NULL',N'[repo].[RepoObjectColumnProperty_sys_repo]',N'[repo].[RepoObjectColumnProperty]',N'i',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(47,12,420,NULL,N'repo.RepoObjectColumnProperty - UPDATE',1,0,0,0,N'--update table [repo].[RepoObjectColumnProperty] via view
UPDATE repo.RepoObjectColumnProperty_sys_repo
SET [RepoObjectColumnProperty_property_value] = [property_value]
WHERE NOT [RepoObjectColumnProperty_id] IS NULL
 AND [RepoObjectColumnProperty_property_value] <> [property_value]',N'[repo].[RepoObjectColumnProperty_sys_repo]',N'[repo].[RepoObjectColumnProperty]',N'u',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(48,7,100,NULL,N'check for empty source',0,1,1,0,N'(SELECT count(*) FROM [repo].[RepoObject_SqlModules_61_SelectIdentifier_Union]) = 0',N'[repo].[RepoObject_SqlModules_61_SelectIdentifier_Union]',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(49,7,110,100,N'ERROR 50110: persistence source is empty',0,0,0,0,N' THROW 50110
  , ''persistence source is empty: [repo].[RepoObject_SqlModules_61_SelectIdentifier_Union]''
  , 1;
',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(50,7,400,NULL,N'truncate persistence target',1,0,0,0,N'TRUNCATE TABLE [repo].[RepoObject_SqlModules_61_SelectIdentifier_Union_T]',NULL,N'[repo].[RepoObject_SqlModules_61_SelectIdentifier_Union_T]',N'D',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(51,7,800,NULL,N'insert all',1,0,0,0,N'INSERT INTO 
 [repo].[RepoObject_SqlModules_61_SelectIdentifier_Union_T]
 (
  [alias_QuoteName]
, [class]
, [normalized]
, [RepoObject_guid]
, [RowNumber_per_Object]
, [source_column_QuoteName]
, [source_table_QuoteName]
, [SysObject_fullname]
)
SELECT
  [alias_QuoteName]
, [class]
, [normalized]
, [RepoObject_guid]
, [RowNumber_per_Object]
, [source_column_QuoteName]
, [source_table_QuoteName]
, [SysObject_fullname]

FROM [repo].[RepoObject_SqlModules_61_SelectIdentifier_Union] AS S',N'[repo].[RepoObject_SqlModules_61_SelectIdentifier_Union]',N'[repo].[RepoObject_SqlModules_61_SelectIdentifier_Union_T]',N'I',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(52,8,210,NULL,N'SET several RepoObject_SysObject_...',1,0,0,0,N'/*
use objects with [RepoObject_guid] stored in extended properties
	
- SysObject could be renamed after previous sync
	- => update SysObject properties in RepoObject
	- don''t change RepoObject names
*/
UPDATE repo.SysObject_RepoObject_via_guid
SET [RepoObject_SysObject_id] = [SysObject_id]
 , [RepoObject_SysObject_schema_name] = [SysObject_schema_name]
 , [RepoObject_SysObject_name] = [SysObject_name]
 , [RepoObject_SysObject_type] = [SysObject_type]
 , [RepoObject_SysObject_modify_date] = [modify_date]
 , [RepoObject_SysObject_parent_object_id] = [parent_object_id]
 , [RepoObject_is_SysObject_missing] = NULL
WHERE NOT [RepoObject_guid] IS NULL
 AND (
  [RepoObject_SysObject_id] <> [SysObject_id]
  OR [RepoObject_SysObject_id] IS NULL
  OR [RepoObject_SysObject_schema_name] <> [SysObject_schema_name]
  OR [RepoObject_SysObject_name] <> [SysObject_name]
  OR [RepoObject_SysObject_type] <> [SysObject_type]
  OR [RepoObject_SysObject_modify_date] <> [modify_date]
  OR [RepoObject_SysObject_modify_date] IS NULL
  OR [RepoObject_SysObject_parent_object_id] <> [parent_object_id]
  --
  )',N'[repo_sys].[SysObject]',N'[repo].[RepoObject]',N'u',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(53,8,310,NULL,N'SET [SysObject_name] = [repo].[RepoObject].[RepoObject_guid]',1,0,0,0,N'/*
in case of possible conflict when inserting missing guid because auf [UK_RepoObject__SysNames] conflicting entries get 
[SysObject_name] = [repo].[RepoObject].[RepoObject_guid]
this will allow INSERT in the next step without issues
*/
UPDATE repo.RepoObject
SET [SysObject_name] = [repo].[RepoObject].[RepoObject_guid]
FROM [repo].[RepoObject]
INNER JOIN (
 SELECT [SysObject_id]
  , [SysObject_RepoObject_guid]
  , [SysObject_schema_name]
  , [SysObject_name]
 FROM [repo].[SysObject_RepoObject_via_guid]
 WHERE
  --SysObject, which exists in database and have a RepoObject_guid assigned in extended properties 
  NOT [SysObject_RepoObject_guid] IS NULL
  --but the have not yet a RepoObject_guid assigned in [repo].[RepoObject] 
  AND [RepoObject_guid] IS NULL
 ) AS [missing_guid]
 ON [repo].[RepoObject].[SysObject_schema_name] = [missing_guid].[SysObject_schema_name]
  AND [repo].[RepoObject].[SysObject_name] = [missing_guid].[SysObject_name]',N'[repo_sys].[SysObject]',N'[repo].[RepoObject]',N'u',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(54,8,410,NULL,N'[SysObject_RepoObject_guid] -> [RepoObject_guid]; some name, type, …',1,0,0,0,N'/*
if a [RepoObject_guid] is stored in extended properties but missing in RepoObject, it should be restored
use objects with [RepoObject_guid] stored in extended properties
	
- restore / insert RepoObject_guid from [SysObject_RepoObject_guid]
- SysObject names are restored as SysObject names
- a conflict could happen when some RepoObject have been renamed and when they now conflict with existing RepoObject names  
	[UK_RepoObject_Names]
	=> thats way we use [RepoObject_guid] as [RepoObject_name] to avoid conflicts we will later rename [RepoObject_name] to [SysObject_name] where this is possible
*/
INSERT INTO repo.RepoObject (
 [RepoObject_guid]
 , [SysObject_id]
 , [SysObject_schema_name]
 , [SysObject_name]
 , [SysObject_type]
 , [SysObject_modify_date]
 , [SysObject_parent_object_id]
 , [RepoObject_schema_name]
 , [RepoObject_name]
 , [RepoObject_type]
 )
SELECT [SysObject_RepoObject_guid] AS [RepoObject_guid]
 , [SysObject_id]
 , [SysObject_schema_name]
 , [SysObject_name]
 , [SysObject_type]
 , [modify_date] AS [SysObject_modify_date]
 , [parent_object_id] AS [SysObject_parent_object_id]
 , [SysObject_schema_name] AS [RepoObject_schema_name]
 , [SysObject_RepoObject_guid] AS [RepoObject_name] --guid is used as name!
 , [SysObject_type] AS [RepoObject_type]
FROM repo.SysObject_RepoObject_via_guid
WHERE NOT [SysObject_RepoObject_guid] IS NULL
 AND [RepoObject_guid] IS NULL',N'[repo_sys].[SysObject]',N'[repo].[RepoObject]',N'i',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(55,8,510,NULL,N'INSERT still missing Object',1,0,0,0,N'/*
ensure all objects existing in database (as SysObject) are also included into [repo].[RepoObject]
	
- this should be SysObject without RepoObject_guid in extended properties
- when inserting they get a RepoObject_guid
- we should use this new RepoObject_guid as [RepoObject_name], but we don''t know it, when we insert. That''s why we use anything else unique: NEWID()
*/
INSERT INTO repo.RepoObject (
 [SysObject_id]
 , [RepoObject_schema_name]
 --, [RepoObject_name]
 , [RepoObject_type]
 , [SysObject_schema_name]
 , [SysObject_name]
 , [SysObject_type]
 , [SysObject_modify_date]
 , [SysObject_parent_object_id]
 )
SELECT [SysObject_id]
 , [SysObject_schema_name]
 --, NEWID() AS          [RepoObject_name]
 , [SysObject_type] AS [RepoObject_type]
 , [SysObject_schema_name]
 , [SysObject_name]
 , [SysObject_type]
 , [modify_date] AS [SysObject_modify_date]
 , [parent_object_id] AS [SysObject_parent_object_id]
FROM repo.SysObject_RepoObject_via_name
WHERE [RepoObject_guid] IS NULL;',N'[repo_sys].[SysObject]',N'[repo].[RepoObject]',N'i',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(56,8,610,NULL,N'SET [RepoObject_schema_name] = [SysObject_schema_name] , [RepoObject_name] = [SysObject_name]',1,0,0,0,N'--now we try to set [RepoObject_name] = [SysObject_name] where this is possible whithout conflicts
--remaining [RepoObject_name] still could have some guid, and this needs to solved separately
UPDATE repo.RepoObject
SET [RepoObject_schema_name] = [SysObject_schema_name]
 , [RepoObject_name] = [SysObject_name]
WHERE
 [has_different_sys_names] = 1
 --exclude surrogate [SysObject_name] as source
 AND [is_SysObject_name_uniqueidentifier] = 0
 --update [is_repo_managed] RepoObjects only, if [is_RepoObject_name_uniqueidentifier], to get a real name
 AND  (ISNULL([is_repo_managed], 0) = 0 OR [is_RepoObject_name_uniqueidentifier] = 1)
  --avoid not unique entries
 --do not update, if the target entry ([RepoObject_schema_name], [RepoObject_name]) exists
 --The UK would prevent that
 AND NOT EXISTS (
  SELECT [RepoObject_schema_name]
   , [RepoObject_name]
  FROM [repo].[RepoObject] AS [ro2]
  WHERE [repo].[RepoObject].[SysObject_schema_name] = [ro2].[RepoObject_schema_name]
   AND [repo].[RepoObject].[SysObject_name] = [ro2].[RepoObject_name]
  )',N'[repo].[RepoObject]',N'[repo].[RepoObject]',N'u',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(57,8,1010,NULL,N'write RepoObject_guid into extended properties of SysObject',1,0,0,0,N'DECLARE property_cursor CURSOR READ_ONLY
FOR
--
--level 1 objects which are in level1type
SELECT [T1].[RepoObject_guid]
 , [T1].[SysObject_schema_name]
 , [T2].[level1type]
 , [level1Name] = [T1].[SysObject_name]
 , [Level2Type] = NULL
 , [level2Name] = NULL
 , [T1].[SysObject_type]
FROM repo.SysObject_RepoObject_via_name AS T1
INNER JOIN repo.[type_level1type_level2type] AS T2
 ON T1.SysObject_type = T2.type
WHERE NOT [T1].[RepoObject_guid] IS NULL
 AND [T1].[SysObject_RepoObject_guid] IS NULL
 --level1Type objects
 AND NOT [T2].[level1type] IS NULL
 --the next is redundant, these kind of Objects should not exist in the database
 AND [T1].[is_SysObject_name_uniqueidentifier] = 0

UNION ALL

SELECT [T1].[RepoObject_guid]
 , [T1].[SysObject_schema_name]
 , [level1type] = [T4].[level1type]
 , [level1Name] = [parent].[SysObject_name]
 , [Level2Type] = [T2].[level2type]
 , [level2Name] = [T1].[SysObject_name]
 , [T1].[SysObject_type]
--, [parent].[SysObject_id]
--, [parent].[SysObject_schema_name]
--, [parent].[SysObject_name]
--, [parent].[SysObject_type]
FROM repo.SysObject_RepoObject_via_name AS T1
INNER JOIN repo.[type_level1type_level2type] AS T2
 ON T1.SysObject_type = T2.type
INNER JOIN repo.SysObject_RepoObject_via_name AS parent
 ON T1.parent_object_id = parent.SysObject_id
INNER JOIN repo.[type_level1type_level2type] AS T4
 ON parent.SysObject_type = T4.type
WHERE NOT [T1].[RepoObject_guid] IS NULL
 AND [T1].[SysObject_RepoObject_guid] IS NULL
 --level2Type objects
 AND NOT [T2].[level2type] IS NULL
 --level1 object
 --the next is redundant, these kind of Objects should not exist in the database
 AND [T1].[is_SysObject_name_uniqueidentifier] = 0

DECLARE @RepoObject_guid UNIQUEIDENTIFIER
 , @schema_name NVARCHAR(128)
 , @level1type VARCHAR(128)
 , @level1name NVARCHAR(128)
 , @level2type VARCHAR(128)
 , @level2name NVARCHAR(128)
 , @type CHAR(2);

SET @rows = 0;

OPEN property_cursor;

FETCH NEXT
FROM property_cursor
INTO @RepoObject_guid
 , @schema_name
 , @level1type
 , @level1name
 , @level2type
 , @level2name
 , @type

WHILE @@fetch_status <> - 1
BEGIN
 IF @@fetch_status <> - 2
 BEGIN
  EXEC repo_sys.[usp_AddOrUpdateExtendedProperty] @name = N''RepoObject_guid''
   , @value = @RepoObject_guid
   , @level0type = N''Schema''
   , @level0name = @schema_name
   , @level1type = @level1type
   , @level1name = @level1name
   , @level2type = @level2type
   , @level2name = @level2name

  SET @rows = @rows + 1;
 END;

 FETCH NEXT
 FROM property_cursor
 INTO @RepoObject_guid
  , @schema_name
  , @level1type
  , @level1name
  , @level2type
  , @level2name
  , @type
END

CLOSE property_cursor;

DEALLOCATE property_cursor',N'[repo].[RepoObject]',N'[repo_sys].[SysObject]',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(58,8,2010,NULL,N'SET is_SysObject_missing = 1',1,0,0,0,N'/*
objects deleted or renamed in database but still referenced in [repo].[RepoObject] will be marked in RepoObject with is_SysObject_missing = 1
check is reuqired by `schema_name` and `name` but not by SysObject_ID, because SysObject_ID can change when objects are recreated
*/
UPDATE repo.RepoObject
SET [is_SysObject_missing] = 1
FROM [repo].[RepoObject] [T1]
WHERE NOT EXISTS (
  SELECT [SysObject_id]
  FROM [repo_sys].[SysObject] AS [Filter]
  WHERE [t1].[SysObject_schema_name] = [Filter].[SysObject_schema_name]
   AND [T1].[SysObject_name] = [Filter].[SysObject_name]
  )',N'[repo].[RepoObject]',N'[repo].[RepoObject]',N'u',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(59,8,2110,NULL,N'DELETE; marked missing SysObject, but not is_repo_managed  = 1',1,0,0,0,N'/*
delete objects, missing in SysObjects, if they are not is_repo_managed
if they are is_repo_managed we don''t want to delete them but there should be some handling
*/
DELETE repo.RepoObject
WHERE ISNULL([is_repo_managed], 0) = 0
 AND [is_SysObject_missing] = 1',N'[repo].[RepoObject]',N'[repo].[RepoObject]',N'd',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(60,8,2210,NULL,N'UPDATE other properties, where not is_repo_managed  = 1',1,0,0,0,N'--update other properties for RepoObject which are not is_repo_managed
--we do this after updating guid in SysObjects to ensure the guid can be used to get [history_table_guid]
UPDATE ro
SET [Repo_history_table_guid] = [history_table_guid]
 , [Repo_temporal_type] = [temporal_type]
FROM [repo].[SysObject_RepoObject_via_guid] [ro]
WHERE
 --not is_repo_managed 
 ISNULL([ro].[is_repo_managed], 0) = 0
 AND (
  --
  1 = 0
  --
  OR [Repo_history_table_guid] <> [history_table_guid]
  OR (
   [Repo_history_table_guid] IS NULL
   AND NOT [history_table_guid] IS NULL
   )
  OR (
   [history_table_guid] IS NULL
   AND NOT [Repo_history_table_guid] IS NULL
   )
  OR [Repo_temporal_type] <> [temporal_type]
  OR (
   [Repo_temporal_type] IS NULL
   AND NOT [temporal_type] IS NULL
   )
  OR (
   [temporal_type] IS NULL
   AND NOT [Repo_temporal_type] IS NULL
   )
  --
  )',N'[repo_sys].[SysObject]',N'[repo].[RepoObject]',N'u',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(61,12,310,NULL,N'repo.RepoObjectProperty - INSERT',1,0,0,0,N'INSERT INTO repo.RepoObjectProperty (
 [RepoObject_guid]
 , [property_name]
 , [property_value]
 )
SELECT DISTINCT [RepoObject_guid]
 , [property_name]
 , [property_value]
FROM repo.RepoObjectProperty_sys_repo AS T1
WHERE [RepoObjectProperty_id] IS NULL',N'[repo].[RepoObjectProperty_sys_repo]',N'[repo].[RepoObjectProperty]',N'i',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(62,12,320,NULL,N'repo.RepoObjectProperty - UPDATE',1,0,0,0,N'--update table [repo].[RepoObjectProperty] via view
UPDATE repo.RepoObjectProperty_sys_repo
SET [RepoObjectProperty_property_value] = [property_value]
WHERE NOT [RepoObjectProperty_id] IS NULL
 AND [RepoObjectProperty_property_value] <> [property_value]',N'[repo].[RepoObjectProperty_sys_repo]',N'[repo].[RepoObjectProperty]',N'u',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(63,8,4010,NULL,N'SET [Repo_temporal_type]',1,0,0,0,N'--set temporal_type
--0 = NON_TEMPORAL_TABLE
--1 = HISTORY_TABLE
--2 = SYSTEM_VERSIONED_TEMPORAL_TABLE
UPDATE ro
SET [Repo_temporal_type] = rop.temporal_type
FROM [repo].[RepoObject] ro
INNER JOIN [repo].[RepoObject_persistence] rop
 ON rop.[target_RepoObject_guid] = ro.[RepoObject_guid]
WHERE ro.[Repo_temporal_type] <> rop.temporal_type
 OR ro.[Repo_temporal_type] IS NULL',N'[repo].[RepoObject_persistence]',N'[repo].[RepoObject]',N'u',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(66,6,5010,NULL,N'DELETE not existing',1,0,1,0,N'DELETE t
FROM [graph].[RepoObjectColumn] [t]
WHERE NOT EXISTS (
  SELECT 1
  FROM [repo].[RepoObjectColumn] AS [ro]
  WHERE [ro].[RepoObjectColumn_guid] = [t].[RepoObjectColumn_guid]
  )',N'[repo].[RepoObjectColumn]',N'[graph].[RepoObjectColumn]',N'd',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(67,6,5110,NULL,N'INSERT missing',1,0,1,0,N'INSERT INTO [graph].[RepoObjectColumn] ([RepoObjectColumn_guid])
SELECT [RepoObjectColumn_guid]
FROM [repo].[RepoObjectColumn] AS [ro]
WHERE NOT EXISTS (
  SELECT 1
  FROM [graph].[RepoObjectColumn] AS [t]
  WHERE [ro].[RepoObjectColumn_guid] = [t].[RepoObjectColumn_guid]
  )',N'[repo].[RepoObjectColumn]',N'[graph].[RepoObjectColumn]',N'i',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(68,2,2110,NULL,N'MERGE [graph].[ReferencedObject]',1,0,0,0,N'MERGE [graph].[ReferencedObject]
USING (
 (
  SELECT DISTINCT
   --
   [referencing_RepoObject_guid]
   , [referenced_RepoObject_guid]
  FROM [repo].[RepoObject_reference_union]
  ) AS S
 --
 JOIN [graph].[RepoObject] referencing
  ON S.[referencing_RepoObject_guid] = referencing.[RepoObject_guid]
 JOIN [graph].[RepoObject] referenced
  ON S.[referenced_RepoObject_guid] = referenced.[RepoObject_guid]
 )
 ON MATCH(referencing - (ReferencedObject) - > referenced)
WHEN NOT MATCHED BY TARGET
 THEN
  INSERT (
   $FROM_ID
   , $TO_ID
   )
  VALUES (
   referencing.$NODE_ID
   , referenced.$NODE_ID
   )
WHEN NOT MATCHED BY SOURCE
 THEN
  DELETE
OUTPUT deleted.*
 , $ACTION
 , inserted.*;',N'[repo].[RepoObject_reference_union]',N'[graph].[ReferencedObject]',N'u',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(69,2,2120,NULL,N'MERGE [graph].[ReferencingObject]',1,0,0,0,N'MERGE [graph].[ReferencingObject]
USING (
 (
  SELECT DISTINCT
   --
   [referencing_RepoObject_guid]
   , [referenced_RepoObject_guid]
  FROM [repo].[RepoObject_reference_union]
  ) AS S
 --
 JOIN [graph].[RepoObject] referencing
  ON S.[referencing_RepoObject_guid] = referencing.[RepoObject_guid]
 JOIN [graph].[RepoObject] referenced
  ON S.[referenced_RepoObject_guid] = referenced.[RepoObject_guid]
 )
 ON MATCH(referenced - (ReferencingObject) - > referencing)
WHEN NOT MATCHED BY TARGET
 THEN
  INSERT (
   $FROM_ID
   , $TO_ID
   )
  VALUES (
   referenced.$NODE_ID
   , referencing.$NODE_ID
   )
WHEN NOT MATCHED BY SOURCE
 THEN
  DELETE
OUTPUT deleted.*
 , $ACTION
 , inserted.*;',N'[repo].[RepoObject_reference_union]',N'[graph].[ReferencingObject]',N'u',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(70,9,100,NULL,N'check for empty source',0,1,0,0,N'(SELECT count(*) FROM [graph].[RepoObject_S]) = 0',N'[graph].[RepoObject_S]',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(71,9,110,100,N'ERROR 50110: persistence source is empty',0,0,0,0,N' THROW 50110
  , ''persistence source is empty: [graph].[RepoObject_S]''
  , 1;
',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(72,9,400,NULL,N'truncate persistence target',1,0,1,0,N'TRUNCATE TABLE [graph].[RepoObject]',NULL,N'[graph].[RepoObject]',N'D',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(73,9,800,NULL,N'insert all',1,0,1,0,N'INSERT INTO 
 [graph].[RepoObject]
 (
  [RepoObject_fullname]
, [RepoObject_guid]
, [RepoObject_type]
)
SELECT
  [RepoObject_fullname]
, [RepoObject_guid]
, [RepoObject_type]

FROM [graph].[RepoObject_S] AS S',N'[graph].[RepoObject_S]',N'[graph].[RepoObject]',N'I',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(74,10,100,NULL,N'check for empty source',0,1,0,0,N'(SELECT count(*) FROM [graph].[RepoObjectColumn_S]) = 0',N'[graph].[RepoObjectColumn_S]',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(75,10,110,100,N'ERROR 50110: persistence source is empty',0,0,0,0,N' THROW 50110
  , ''persistence source is empty: [graph].[RepoObjectColumn_S]''
  , 1;
',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(76,10,400,NULL,N'truncate persistence target',1,0,1,0,N'TRUNCATE TABLE [graph].[RepoObjectColumn]',NULL,N'[graph].[RepoObjectColumn]',N'D',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(77,10,800,NULL,N'insert all',1,0,1,0,N'INSERT INTO 
 [graph].[RepoObjectColumn]
 (
  [RepoObject_fullname]
, [RepoObject_guid]
, [RepoObject_type]
, [RepoObjectColumn_guid]
, [RepoObjectColumn_name]
)
SELECT
  [RepoObject_fullname]
, [RepoObject_guid]
, [RepoObject_type]
, [RepoObjectColumn_guid]
, [RepoObjectColumn_name]

FROM [graph].[RepoObjectColumn_S] AS S',N'[graph].[RepoObjectColumn_S]',N'[graph].[RepoObjectColumn]',N'I',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(78,9,300,NULL,N'check duplicate per PK',0,1,1,0,N'EXISTS(SELECT TOP 1 1 FROM [graph].[RepoObject_S] GROUP BY  [RepoObject_guid] HAVING COUNT(*) > 1)',N'[graph].[RepoObject_S]',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(79,10,300,NULL,N'check duplicate per PK',0,1,1,0,N'EXISTS(SELECT TOP 1 1 FROM [graph].[RepoObjectColumn_S] GROUP BY  [RepoObjectColumn_guid] HAVING COUNT(*) > 1)',N'[graph].[RepoObjectColumn_S]',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(80,9,310,300,N'ERROR 50310: persistence source PK not unique',0,0,0,0,N' THROW 50310
  , ''persistence source PK not unique: [graph].[RepoObject_S];  [RepoObject_guid]''
  , 1;
',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(81,10,310,300,N'ERROR 50310: persistence source PK not unique',0,0,0,0,N' THROW 50310
  , ''persistence source PK not unique: [graph].[RepoObjectColumn_S];  [RepoObjectColumn_guid]''
  , 1;
',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(82,9,500,NULL,N'delete persistence target missing in source',1,0,0,0,N'DELETE T
FROM [graph].[RepoObject] AS T
WHERE
NOT EXISTS
(SELECT 1 FROM [graph].[RepoObject_S] AS S
WHERE
T.[RepoObject_guid] = S.[RepoObject_guid]
)
 ',N'[graph].[RepoObject_S]',N'[graph].[RepoObject]',N'D',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(83,10,500,NULL,N'delete persistence target missing in source',1,0,0,0,N'DELETE T
FROM [graph].[RepoObjectColumn] AS T
WHERE
NOT EXISTS
(SELECT 1 FROM [graph].[RepoObjectColumn_S] AS S
WHERE
T.[RepoObjectColumn_guid] = S.[RepoObjectColumn_guid]
)
 ',N'[graph].[RepoObjectColumn_S]',N'[graph].[RepoObjectColumn]',N'D',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(84,9,550,NULL,N'delete persistence target changed',1,0,1,0,N'DELETE T
FROM [graph].[RepoObject] AS T
INNER JOIN [graph].[RepoObject_S] AS S
ON
T.[RepoObject_guid] = S.[RepoObject_guid]

WHERE
   T.[RepoObject_fullname] <> S.[RepoObject_fullname]
OR T.[RepoObject_guid] <> S.[RepoObject_guid]
OR T.[RepoObject_type] <> S.[RepoObject_type]
',N'[graph].[RepoObject_S]',N'[graph].[RepoObject]',N'D',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(85,10,550,NULL,N'delete persistence target changed',1,0,1,0,N'DELETE T
FROM [graph].[RepoObjectColumn] AS T
INNER JOIN [graph].[RepoObjectColumn_S] AS S
ON
T.[RepoObjectColumn_guid] = S.[RepoObjectColumn_guid]

WHERE
   T.[RepoObject_fullname] <> S.[RepoObject_fullname]
OR T.[RepoObject_guid] <> S.[RepoObject_guid]
OR T.[RepoObject_type] <> S.[RepoObject_type]
OR T.[RepoObjectColumn_guid] <> S.[RepoObjectColumn_guid]
OR T.[RepoObjectColumn_name] <> S.[RepoObjectColumn_name]
',N'[graph].[RepoObjectColumn_S]',N'[graph].[RepoObjectColumn]',N'D',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(86,9,600,NULL,N'update changed',1,0,0,0,N'UPDATE T
SET
  T.[RepoObject_fullname] = S.[RepoObject_fullname]
, T.[RepoObject_guid] = S.[RepoObject_guid]
, T.[RepoObject_type] = S.[RepoObject_type]

FROM [graph].[RepoObject] AS T
INNER JOIN [graph].[RepoObject_S] AS S
ON
T.[RepoObject_guid] = S.[RepoObject_guid]

WHERE
   T.[RepoObject_fullname] <> S.[RepoObject_fullname]
OR T.[RepoObject_guid] <> S.[RepoObject_guid]
OR T.[RepoObject_type] <> S.[RepoObject_type]
',N'[graph].[RepoObject_S]',N'[graph].[RepoObject]',N'U',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(87,10,600,NULL,N'update changed',1,0,0,0,N'UPDATE T
SET
  T.[RepoObject_fullname] = S.[RepoObject_fullname]
, T.[RepoObject_guid] = S.[RepoObject_guid]
, T.[RepoObject_type] = S.[RepoObject_type]
, T.[RepoObjectColumn_guid] = S.[RepoObjectColumn_guid]
, T.[RepoObjectColumn_name] = S.[RepoObjectColumn_name]

FROM [graph].[RepoObjectColumn] AS T
INNER JOIN [graph].[RepoObjectColumn_S] AS S
ON
T.[RepoObjectColumn_guid] = S.[RepoObjectColumn_guid]

WHERE
   T.[RepoObject_fullname] <> S.[RepoObject_fullname]
OR T.[RepoObject_guid] <> S.[RepoObject_guid]
OR T.[RepoObject_type] <> S.[RepoObject_type]
OR T.[RepoObjectColumn_guid] <> S.[RepoObjectColumn_guid]
OR T.[RepoObjectColumn_name] <> S.[RepoObjectColumn_name]
',N'[graph].[RepoObjectColumn_S]',N'[graph].[RepoObjectColumn]',N'U',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(88,9,700,NULL,N'insert missing',1,0,0,0,N'INSERT INTO 
 [graph].[RepoObject]
 (
  [RepoObject_fullname]
, [RepoObject_guid]
, [RepoObject_type]
)
SELECT
  [RepoObject_fullname]
, [RepoObject_guid]
, [RepoObject_type]

FROM [graph].[RepoObject_S] AS S
WHERE
NOT EXISTS
(SELECT 1
FROM [graph].[RepoObject] AS T
WHERE
T.[RepoObject_guid] = S.[RepoObject_guid]
)',N'[graph].[RepoObject_S]',N'[graph].[RepoObject]',N'I',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(89,10,700,NULL,N'insert missing',1,0,0,0,N'INSERT INTO 
 [graph].[RepoObjectColumn]
 (
  [RepoObject_fullname]
, [RepoObject_guid]
, [RepoObject_type]
, [RepoObjectColumn_guid]
, [RepoObjectColumn_name]
)
SELECT
  [RepoObject_fullname]
, [RepoObject_guid]
, [RepoObject_type]
, [RepoObjectColumn_guid]
, [RepoObjectColumn_name]

FROM [graph].[RepoObjectColumn_S] AS S
WHERE
NOT EXISTS
(SELECT 1
FROM [graph].[RepoObjectColumn] AS T
WHERE
T.[RepoObjectColumn_guid] = S.[RepoObjectColumn_guid]
)',N'[graph].[RepoObjectColumn_S]',N'[graph].[RepoObjectColumn]',N'I',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(90,8,5200,NULL,N'[graph].[usp_PERSIST_RepoObject]',1,0,0,1,N'[graph].[usp_PERSIST_RepoObject]',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(91,6,5200,NULL,N'[graph].[usp_PERSIST_RepoObjectColumn]',1,0,0,1,N'[graph].[usp_PERSIST_RepoObjectColumn]',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(92,8,4110,NULL,N'MERGE INTO [repo].[ProcedureInstance]',1,0,0,0,N'MERGE INTO [repo].[ProcedureInstance] AS T
USING (
 SELECT [RepoObject_guid] AS [Procedure_RepoObject_guid]
  , '''' AS [Instance]
 FROM [repo].[RepoObject]
 WHERE [RepoObject_type] = ''P''
 ) AS S
 ON T.[Procedure_RepoObject_guid] = S.[Procedure_RepoObject_guid]
  AND T.[Instance] = S.[Instance]
WHEN NOT MATCHED BY TARGET
 THEN
  INSERT (
   [Procedure_RepoObject_guid]
   , [Instance]
   )
  VALUES (
   S.[Procedure_RepoObject_guid]
   , S.[Instance]
   )
   --DELETE not required, FK is ON DELETE CASCADE
   ;',N'[repo].[RepoObject]',N'[repo].[ProcedureInstance]',N'u',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(93,8,700,NULL,N'[repo].[RepoObject_RequiredRepoObjectMerge]',1,1,0,0,N'(SELECT COUNT(*) FROM [repo].[RepoObject_RequiredRepoObjectMerge]) > 1',N'[repo].[RepoObject]',N'[repo].[RepoObject]',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(94,8,710,700,N'merge RepoObject',1,0,0,0,N'BEGIN TRY
 UPDATE T
 SET [target_RepoObject_guid] = [S].[ro2_RepoObject_guid]
 FROM [repo].[RepoObject_persistence] [T]
 INNER JOIN [repo].[RepoObject_RequiredRepoObjectMerge] [S]
  ON [S].[RepoObject_guid] = [T].[target_RepoObject_guid]

 UPDATE T
 SET [source_RepoObject_guid] = [S].[ro2_RepoObject_guid]
 FROM [repo].[RepoObject_persistence] [T]
 INNER JOIN [repo].[RepoObject_RequiredRepoObjectMerge] [S]
  ON [S].[RepoObject_guid] = [T].[source_RepoObject_guid]

 UPDATE T
 SET [Procedure_RepoObject_guid] = [S].[ro2_RepoObject_guid]
 FROM [repo].[ProcedureInstance] [T]
 INNER JOIN [repo].[RepoObject_RequiredRepoObjectMerge] [S]
  ON [S].[RepoObject_guid] = [T].[Procedure_RepoObject_guid]

 --now [T].[RepoObject_guid] has been replaced and can be deleted
 DELETE T
 FROM [repo].[RepoObject] T
 INNER JOIN [repo].[RepoObject_RequiredRepoObjectMerge] [S]
  ON [S].[RepoObject_guid] = [T].[RepoObject_guid]
END TRY

BEGIN CATCH
 PRINT ''issue merging RepoObject'';

 THROW;
END CATCH;',N'[repo].[RepoObject]',N'[repo].[RepoObject]',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(95,8,720,710,N'SET [RepoObject_schema_name] = [SysObject_schema_name] , [RepoObject_name] = [SysObject_name]',1,0,0,0,N'--now we try to set [RepoObject_name] = [SysObject_name] where this is possible whithout conflicts
--remaining [RepoObject_name] still could have some guid, and this needs to solved separately
UPDATE repo.RepoObject
SET [RepoObject_schema_name] = [SysObject_schema_name]
 , [RepoObject_name] = [SysObject_name]
WHERE
 [has_different_sys_names] = 1
 --exclude surrogate [SysObject_name] as source
 AND [is_SysObject_name_uniqueidentifier] = 0
 --update [is_repo_managed] RepoObjects only, if [is_RepoObject_name_uniqueidentifier], to get a real name
 AND  (ISNULL([is_repo_managed], 0) = 0 OR [is_RepoObject_name_uniqueidentifier] = 1)
  --avoid not unique entries
 --do not update, if the target entry ([RepoObject_schema_name], [RepoObject_name]) exists
 --The UK would prevent that
 AND NOT EXISTS (
  SELECT [RepoObject_schema_name]
   , [RepoObject_name]
  FROM [repo].[RepoObject] AS [ro2]
  WHERE [repo].[RepoObject].[SysObject_schema_name] = [ro2].[RepoObject_schema_name]
   AND [repo].[RepoObject].[SysObject_name] = [ro2].[RepoObject_name]
  )',N'[repo].[RepoObject]',N'[repo].[RepoObject]',N'u',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(96,2,3110,NULL,N'Merge Into [repo].[ProcedureInstanceDependency] (Persistence)',1,0,0,0,N'Merge Into [repo].[ProcedureInstanceDependency] T
USING
(
    Select TFirst.id As [referencing_id]
         , TLast.id  As [referenced_id]
         , 1         As [is_PersistenceDependency]
    From repo.Match_RepoObject_referenced_UspPersistence T1
        Inner Join [repo].[ProcedureInstance]            TFirst
            On TFirst.[Procedure_RepoObject_guid] = T1.First_usp_persistence_RepoObject_guid
               And TFirst.Instance = ''''
        Inner Join [repo].[ProcedureInstance]            TLast
            On TLast.[Procedure_RepoObject_guid] = T1.Last_usp_persistence_RepoObject_guid
               And TLast.Instance = ''''
) S
On S.[referencing_id] = T.[referencing_id]
   And S.[referenced_id] = T.[referenced_id]
When MATCHED And T.[is_PersistenceDependency] = 0 Then
    Update Set [is_PersistenceDependency] = 1
When Not MATCHED By TARGET Then
    Insert
    (
        [referencing_id]
      , [referenced_id]
      , [is_PersistenceDependency]
    )
    Values
    (S.[referencing_id], S.[referenced_id], S.[is_PersistenceDependency])
When Not MATCHED By SOURCE Then
    Delete;',N'[repo].[Match_RepoObject_referenced_UspPersistence]',N'[repo].[ProcedureInstanceDependency]',N'u',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(97,11,100,NULL,N'check for empty source',0,1,1,0,N'(SELECT count(*) FROM [graph].[ProcedureInstance_S]) = 0',N'[graph].[ProcedureInstance_S]',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(98,11,110,100,N'ERROR 50110: persistence source is empty',0,0,0,0,N' THROW 50110
  , ''persistence source is empty: [graph].[ProcedureInstance_S]''
  , 1;
',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(99,11,400,NULL,N'truncate persistence target',1,0,1,0,N'TRUNCATE TABLE [graph].[ProcedureInstance]',NULL,N'[graph].[ProcedureInstance]',N'D',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(100,11,800,NULL,N'insert all',1,0,1,0,N'INSERT INTO 
 [graph].[ProcedureInstance]
 (
  [Instance]
, [Procedure_fullname]
, [Procedure_RepoObject_guid]
)
SELECT
  [Instance]
, [Procedure_fullname]
, [Procedure_RepoObject_guid]

FROM [graph].[ProcedureInstance_S] AS S',N'[graph].[ProcedureInstance_S]',N'[graph].[ProcedureInstance]',N'I',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(101,11,300,NULL,N'check duplicate per PK',0,1,1,0,N'EXISTS(SELECT TOP 1 1 FROM [graph].[ProcedureInstance_S] GROUP BY  [Procedure_RepoObject_guid], [Instance] HAVING COUNT(*) > 1)',N'[graph].[ProcedureInstance_S]',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(102,11,310,300,N'ERROR 50310: persistence source PK not unique',0,0,0,0,N' THROW 50310
  , ''persistence source PK not unique: [graph].[ProcedureInstance_S];  [Procedure_RepoObject_guid], [Instance]''
  , 1;
',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(103,11,500,NULL,N'delete persistence target missing in source',1,0,0,0,N'DELETE T
FROM [graph].[ProcedureInstance] AS T
WHERE
NOT EXISTS
(SELECT 1 FROM [graph].[ProcedureInstance_S] AS S
WHERE
T.[Procedure_RepoObject_guid] = S.[Procedure_RepoObject_guid]
AND T.[Instance] = S.[Instance]
)
 ',N'[graph].[ProcedureInstance_S]',N'[graph].[ProcedureInstance]',N'D',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(104,11,550,NULL,N'delete persistence target changed',1,0,1,0,N'DELETE T
FROM [graph].[ProcedureInstance] AS T
INNER JOIN [graph].[ProcedureInstance_S] AS S
ON
T.[Procedure_RepoObject_guid] = S.[Procedure_RepoObject_guid]
AND T.[Instance] = S.[Instance]

WHERE
   T.[Instance] <> S.[Instance]
OR T.[Procedure_fullname] <> S.[Procedure_fullname]
OR T.[Procedure_RepoObject_guid] <> S.[Procedure_RepoObject_guid]
',N'[graph].[ProcedureInstance_S]',N'[graph].[ProcedureInstance]',N'D',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(105,11,600,NULL,N'update changed',1,0,0,0,N'UPDATE T
SET
  T.[Instance] = S.[Instance]
, T.[Procedure_fullname] = S.[Procedure_fullname]
, T.[Procedure_RepoObject_guid] = S.[Procedure_RepoObject_guid]

FROM [graph].[ProcedureInstance] AS T
INNER JOIN [graph].[ProcedureInstance_S] AS S
ON
T.[Procedure_RepoObject_guid] = S.[Procedure_RepoObject_guid]
AND T.[Instance] = S.[Instance]

WHERE
   T.[Instance] <> S.[Instance]
OR T.[Procedure_fullname] <> S.[Procedure_fullname]
OR T.[Procedure_RepoObject_guid] <> S.[Procedure_RepoObject_guid]
',N'[graph].[ProcedureInstance_S]',N'[graph].[ProcedureInstance]',N'U',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(106,11,700,NULL,N'insert missing',1,0,0,0,N'INSERT INTO 
 [graph].[ProcedureInstance]
 (
  [Instance]
, [Procedure_fullname]
, [Procedure_RepoObject_guid]
)
SELECT
  [Instance]
, [Procedure_fullname]
, [Procedure_RepoObject_guid]

FROM [graph].[ProcedureInstance_S] AS S
WHERE
NOT EXISTS
(SELECT 1
FROM [graph].[ProcedureInstance] AS T
WHERE
T.[Procedure_RepoObject_guid] = S.[Procedure_RepoObject_guid]
AND T.[Instance] = S.[Instance]
)',N'[graph].[ProcedureInstance_S]',N'[graph].[ProcedureInstance]',N'I',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(107,8,5220,NULL,N'[graph].[usp_PERSIST_ProcedureInstance]',1,0,0,1,N'[graph].[usp_PERSIST_ProcedureInstance]',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(108,13,310,NULL,N'Level1-Properties - INSERT + UPDATE',1,0,0,0,N'DECLARE property_cursor CURSOR READ_ONLY
FOR
--
--level 1 extended properties
SELECT [property_name]
 , [property_value]
 , [level0type]
 , [level0name]
 , [level1type]
 , [level1name]
 , [level2type]
 , [level2name]
FROM [repo].[ExtendedProperty_Repo2Sys_level1] AS S
--do not change extended properties with exact match
WHERE NOT EXISTS (
  SELECT 1
  FROM [repo_sys].[ExtendedProperties_ParameterForAddUpdateDrop] AS [T]
  WHERE [T].[property_name] = [S].[property_name]
   AND [T].[property_value] = [S].[property_value]
   AND [T].[level0type] = [S].[level0type]
   AND [T].[level0name] = [S].[level0name]
   AND [T].[level1type] = [S].[level1type]
   AND [T].[level1name] = [S].[level1name]
   AND [T].[level2type] IS NULL
   AND [T].[level2name] IS NULL
  )

--DECLARE @property_name NVARCHAR(128)
-- , @property_value SQL_VARIANT
-- , @schema_name NVARCHAR(128)
-- , @level0type VARCHAR(128)
-- , @level0name NVARCHAR(128)
-- , @level1type VARCHAR(128)
-- , @level1name NVARCHAR(128)
-- , @level2type VARCHAR(128)
-- , @level2name NVARCHAR(128)

SET @rows = 0;

OPEN property_cursor;

FETCH NEXT
FROM property_cursor
INTO @property_name
 , @property_value
 , @level0type
 , @level0name
 , @level1type
 , @level1name
 , @level2type
 , @level2name

WHILE @@fetch_status <> - 1
BEGIN
 IF @@fetch_status <> - 2
 BEGIN
  EXEC repo_sys.[usp_AddOrUpdateExtendedProperty] @name = @property_name
   , @value = @property_value
   , @level0type = @level0type
   , @level0name = @level0name
   , @level1type = @level1type
   , @level1name = @level1name
   , @level2type = @level2type
   , @level2name = @level2name

  SET @rows = @rows + 1;
 END;

 FETCH NEXT
 FROM property_cursor
 INTO @property_name
  , @property_value
  , @level0type
  , @level0name
  , @level1type
  , @level1name
  , @level2type
  , @level2name
END

CLOSE property_cursor;

DEALLOCATE property_cursor',N'[repo].[ExtendedProperty_Repo2Sys_level1]',N'[repo_sys].[usp_AddOrUpdateExtendedProperty]',N'u',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(109,13,320,NULL,N'Level2-Properties - INSERT + UPDATE',1,0,0,0,N'DECLARE property_cursor CURSOR READ_ONLY
FOR
--
--level 2 extended properties
SELECT [property_name]
 , [property_value]
 , [level0type]
 , [level0name]
 , [level1type]
 , [level1name]
 , [level2type]
 , [level2name]
FROM [repo].[ExtendedProperty_Repo2Sys_level2_Union] AS S
--do not change extended properties with exact match
WHERE NOT EXISTS (
  SELECT 1
  FROM [repo_sys].[ExtendedProperties_ParameterForAddUpdateDrop] AS [T]
  WHERE [T].[property_name] = [S].[property_name]
   AND [T].[property_value] = [S].[property_value]
   AND [T].[level0type] = [S].[level0type]
   AND [T].[level0name] = [S].[level0name]
   AND [T].[level1type] = [S].[level1type]
   AND [T].[level1name] = [S].[level1name]
   AND [T].[level2type] = [S].[level2type]
   AND [T].[level2name] = [S].[level2name]
  )

--DECLARE @property_name NVARCHAR(128)
-- , @property_value SQL_VARIANT
-- , @schema_name NVARCHAR(128)
-- , @level0type VARCHAR(128)
-- , @level0name NVARCHAR(128)
-- , @level1type VARCHAR(128)
-- , @level1name NVARCHAR(128)
-- , @level2type VARCHAR(128)
-- , @level2name NVARCHAR(128)

SET @rows = 0;

OPEN property_cursor;

FETCH NEXT
FROM property_cursor
INTO @property_name
 , @property_value
 , @level0type
 , @level0name
 , @level1type
 , @level1name
 , @level2type
 , @level2name

WHILE @@fetch_status <> - 1
BEGIN
 IF @@fetch_status <> - 2
 BEGIN
  EXEC repo_sys.[usp_AddOrUpdateExtendedProperty] @name = @property_name
   , @value = @property_value
   , @level0type = @level0type
   , @level0name = @level0name
   , @level1type = @level1type
   , @level1name = @level1name
   , @level2type = @level2type
   , @level2name = @level2name

  SET @rows = @rows + 1;
 END;

 FETCH NEXT
 FROM property_cursor
 INTO @property_name
  , @property_value
  , @level0type
  , @level0name
  , @level1type
  , @level1name
  , @level2type
  , @level2name
END

CLOSE property_cursor;

DEALLOCATE property_cursor',N'[repo].[ExtendedProperty_Repo2Sys_level2_Union]',N'[repo_sys].[usp_AddOrUpdateExtendedProperty]',N'u',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(110,14,410,NULL,N'Level1-Properties - DROP',1,0,0,0,N'DECLARE property_cursor CURSOR READ_ONLY
FOR
--
--level 1 extended properties
SELECT [property_name]
 , [property_value]
 , [level0type]
 , [level0name]
 , [level1type]
 , [level1name]
 , [level2type]
 , [level2name]
FROM [repo_sys].[ExtendedProperties_ParameterForAddUpdateDrop] AS [T]
WHERE NOT [T].[property_name] = ''RepoObject_guid''
 AND NOT [T].[property_name] = ''RepoObjectColumn_guid''
 AND [T].[level2type] IS NULL
 AND [T].[level2name] IS NULL
 AND NOT EXISTS (
  SELECT 1
  FROM [repo].[ExtendedProperty_Repo2Sys_level1] AS [S]
  WHERE [T].[property_name] = [S].[property_name]
   AND [T].[level0type] = [S].[level0type]
   AND [T].[level0name] = [S].[level0name]
   AND [T].[level1type] = [S].[level1type]
   AND [T].[level1name] = [S].[level1name]
   AND [S].[level2type] IS NULL
   AND [S].[level2name] IS NULL
  )

--DECLARE @property_name NVARCHAR(128)
-- , @property_value SQL_VARIANT
-- , @schema_name NVARCHAR(128)
-- , @level0type VARCHAR(128)
-- , @level0name NVARCHAR(128)
-- , @level1type VARCHAR(128)
-- , @level1name NVARCHAR(128)
-- , @level2type VARCHAR(128)
-- , @level2name NVARCHAR(128)

SET @rows = 0;

OPEN property_cursor;

FETCH NEXT
FROM property_cursor
INTO @property_name
 , @property_value
 , @level0type
 , @level0name
 , @level1type
 , @level1name
 , @level2type
 , @level2name

WHILE @@fetch_status <> - 1
BEGIN
 IF @@fetch_status <> - 2
 BEGIN
  EXEC sys.sp_dropextendedproperty @name = @property_name
   , @level0type = @level0type
   , @level0name = @level0name
   , @level1type = @level1type
   , @level1name = @level1name
   , @level2type = @level2type
   , @level2name = @level2name

  SET @rows = @rows + 1;
 END;

 FETCH NEXT
 FROM property_cursor
 INTO @property_name
  , @property_value
  , @level0type
  , @level0name
  , @level1type
  , @level1name
  , @level2type
  , @level2name
END

CLOSE property_cursor;

DEALLOCATE property_cursor',N'[repo].[ExtendedProperty_Repo2Sys_level1]',N'[sys].[sp_dropextendedproperty]',N'd',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(112,14,420,NULL,N'Level2-Properties - DROP',1,0,0,0,N'DECLARE property_cursor CURSOR READ_ONLY
FOR
--
--level 2 extended properties
SELECT [property_name]
 , [property_value]
 , [level0type]
 , [level0name]
 , [level1type]
 , [level1name]
 , [level2type]
 , [level2name]
FROM [repo_sys].[ExtendedProperties_ParameterForAddUpdateDrop] AS [T]
WHERE NOT [T].[property_name] = ''RepoObject_guid''
 AND NOT [T].[property_name] = ''RepoObjectColumn_guid''
 AND NOT [T].[level2type] IS NULL
 AND NOT [T].[level2name] IS NULL
 AND NOT EXISTS (
  SELECT 1
  FROM [repo].[ExtendedProperty_Repo2Sys_level2_Union] AS [S]
  WHERE [T].[property_name] = [S].[property_name]
   AND [T].[level0type] = [S].[level0type]
   AND [T].[level0name] = [S].[level0name]
   AND [T].[level1type] = [S].[level1type]
   AND [T].[level1name] = [S].[level1name]
   AND [T].[level2type] = [S].[level2type]
   AND [T].[level2name] = [S].[level2name]
  )

--DECLARE @property_name NVARCHAR(128)
-- , @property_value SQL_VARIANT
-- , @schema_name NVARCHAR(128)
-- , @level0type VARCHAR(128)
-- , @level0name NVARCHAR(128)
-- , @level1type VARCHAR(128)
-- , @level1name NVARCHAR(128)
-- , @level2type VARCHAR(128)
-- , @level2name NVARCHAR(128)

SET @rows = 0;

OPEN property_cursor;

FETCH NEXT
FROM property_cursor
INTO @property_name
 , @property_value
 , @level0type
 , @level0name
 , @level1type
 , @level1name
 , @level2type
 , @level2name

WHILE @@fetch_status <> - 1
BEGIN
 IF @@fetch_status <> - 2
 BEGIN
  EXEC sys.sp_dropextendedproperty @name = @property_name
   , @level0type = @level0type
   , @level0name = @level0name
   , @level1type = @level1type
   , @level1name = @level1name
   , @level2type = @level2type
   , @level2name = @level2name

  SET @rows = @rows + 1;
 END;

 FETCH NEXT
 FROM property_cursor
 INTO @property_name
  , @property_value
  , @level0type
  , @level0name
  , @level1type
  , @level1name
  , @level2type
  , @level2name
END

CLOSE property_cursor;

DEALLOCATE property_cursor',N'[repo].[ExtendedProperty_Repo2Sys_level2_Union]',N'[sys].[sp_dropextendedproperty]',N'd',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(113,14,100,NULL,N'DECLARE',0,0,0,0,N'DECLARE
 --
 @property_name NVARCHAR(128)
 , @property_value SQL_VARIANT
 , @schema_name NVARCHAR(128)
 , @level0type VARCHAR(128)
 , @level0name NVARCHAR(128)
 , @level1type VARCHAR(128)
 , @level1name NVARCHAR(128)
 , @level2type VARCHAR(128)
 , @level2name NVARCHAR(128)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(114,13,100,NULL,N'DECLARE',0,0,0,0,N'DECLARE
 --
 @property_name NVARCHAR(128)
 , @property_value SQL_VARIANT
 , @schema_name NVARCHAR(128)
 , @level0type VARCHAR(128)
 , @level0name NVARCHAR(128)
 , @level1type VARCHAR(128)
 , @level1name NVARCHAR(128)
 , @level2type VARCHAR(128)
 , @level2name NVARCHAR(128)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
 ,(115,12,100,NULL,N'DECLARE',0,0,0,0,N'DECLARE
 --
 @property_name NVARCHAR(128)
 , @property_value SQL_VARIANT
 , @schema_name NVARCHAR(128)
 , @level0type VARCHAR(128)
 , @level0name NVARCHAR(128)
 , @level1type VARCHAR(128)
 , @level1name NVARCHAR(128)
 , @level2type VARCHAR(128)
 , @level2name NVARCHAR(128)',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
) AS [Source] ([id],[usp_id],[Number],[Parent_Number],[Name],[has_logging],[is_condition],[is_inactive],[is_SubProcedure],[Statement],[log_source_object],[log_target_object],[log_flag_InsertUpdateDelete],[info_01],[info_02],[info_03],[info_04],[info_05],[info_06],[info_07],[info_08],[info_09])
ON ([Target].[id] = [Source].[id])
WHEN MATCHED AND (
	NULLIF([Source].[usp_id], [Target].[usp_id]) IS NOT NULL OR NULLIF([Target].[usp_id], [Source].[usp_id]) IS NOT NULL OR 
	NULLIF([Source].[Number], [Target].[Number]) IS NOT NULL OR NULLIF([Target].[Number], [Source].[Number]) IS NOT NULL OR 
	NULLIF([Source].[Parent_Number], [Target].[Parent_Number]) IS NOT NULL OR NULLIF([Target].[Parent_Number], [Source].[Parent_Number]) IS NOT NULL OR 
	NULLIF([Source].[Name], [Target].[Name]) IS NOT NULL OR NULLIF([Target].[Name], [Source].[Name]) IS NOT NULL OR 
	NULLIF([Source].[has_logging], [Target].[has_logging]) IS NOT NULL OR NULLIF([Target].[has_logging], [Source].[has_logging]) IS NOT NULL OR 
	NULLIF([Source].[is_condition], [Target].[is_condition]) IS NOT NULL OR NULLIF([Target].[is_condition], [Source].[is_condition]) IS NOT NULL OR 
	NULLIF([Source].[is_inactive], [Target].[is_inactive]) IS NOT NULL OR NULLIF([Target].[is_inactive], [Source].[is_inactive]) IS NOT NULL OR 
	NULLIF([Source].[is_SubProcedure], [Target].[is_SubProcedure]) IS NOT NULL OR NULLIF([Target].[is_SubProcedure], [Source].[is_SubProcedure]) IS NOT NULL OR 
	NULLIF([Source].[Statement], [Target].[Statement]) IS NOT NULL OR NULLIF([Target].[Statement], [Source].[Statement]) IS NOT NULL OR 
	NULLIF([Source].[log_source_object], [Target].[log_source_object]) IS NOT NULL OR NULLIF([Target].[log_source_object], [Source].[log_source_object]) IS NOT NULL OR 
	NULLIF([Source].[log_target_object], [Target].[log_target_object]) IS NOT NULL OR NULLIF([Target].[log_target_object], [Source].[log_target_object]) IS NOT NULL OR 
	NULLIF([Source].[log_flag_InsertUpdateDelete], [Target].[log_flag_InsertUpdateDelete]) IS NOT NULL OR NULLIF([Target].[log_flag_InsertUpdateDelete], [Source].[log_flag_InsertUpdateDelete]) IS NOT NULL OR 
	NULLIF([Source].[info_01], [Target].[info_01]) IS NOT NULL OR NULLIF([Target].[info_01], [Source].[info_01]) IS NOT NULL OR 
	NULLIF([Source].[info_02], [Target].[info_02]) IS NOT NULL OR NULLIF([Target].[info_02], [Source].[info_02]) IS NOT NULL OR 
	NULLIF([Source].[info_03], [Target].[info_03]) IS NOT NULL OR NULLIF([Target].[info_03], [Source].[info_03]) IS NOT NULL OR 
	NULLIF([Source].[info_04], [Target].[info_04]) IS NOT NULL OR NULLIF([Target].[info_04], [Source].[info_04]) IS NOT NULL OR 
	NULLIF([Source].[info_05], [Target].[info_05]) IS NOT NULL OR NULLIF([Target].[info_05], [Source].[info_05]) IS NOT NULL OR 
	NULLIF([Source].[info_06], [Target].[info_06]) IS NOT NULL OR NULLIF([Target].[info_06], [Source].[info_06]) IS NOT NULL OR 
	NULLIF([Source].[info_07], [Target].[info_07]) IS NOT NULL OR NULLIF([Target].[info_07], [Source].[info_07]) IS NOT NULL OR 
	NULLIF([Source].[info_08], [Target].[info_08]) IS NOT NULL OR NULLIF([Target].[info_08], [Source].[info_08]) IS NOT NULL OR 
	NULLIF([Source].[info_09], [Target].[info_09]) IS NOT NULL OR NULLIF([Target].[info_09], [Source].[info_09]) IS NOT NULL) THEN
 UPDATE SET
  [Target].[usp_id] = [Source].[usp_id], 
  [Target].[Number] = [Source].[Number], 
  [Target].[Parent_Number] = [Source].[Parent_Number], 
  [Target].[Name] = [Source].[Name], 
  [Target].[has_logging] = [Source].[has_logging], 
  [Target].[is_condition] = [Source].[is_condition], 
  [Target].[is_inactive] = [Source].[is_inactive], 
  [Target].[is_SubProcedure] = [Source].[is_SubProcedure], 
  [Target].[Statement] = [Source].[Statement], 
  [Target].[log_source_object] = [Source].[log_source_object], 
  [Target].[log_target_object] = [Source].[log_target_object], 
  [Target].[log_flag_InsertUpdateDelete] = [Source].[log_flag_InsertUpdateDelete], 
  [Target].[info_01] = [Source].[info_01], 
  [Target].[info_02] = [Source].[info_02], 
  [Target].[info_03] = [Source].[info_03], 
  [Target].[info_04] = [Source].[info_04], 
  [Target].[info_05] = [Source].[info_05], 
  [Target].[info_06] = [Source].[info_06], 
  [Target].[info_07] = [Source].[info_07], 
  [Target].[info_08] = [Source].[info_08], 
  [Target].[info_09] = [Source].[info_09]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([id],[usp_id],[Number],[Parent_Number],[Name],[has_logging],[is_condition],[is_inactive],[is_SubProcedure],[Statement],[log_source_object],[log_target_object],[log_flag_InsertUpdateDelete],[info_01],[info_02],[info_03],[info_04],[info_05],[info_06],[info_07],[info_08],[info_09])
 VALUES([Source].[id],[Source].[usp_id],[Source].[Number],[Source].[Parent_Number],[Source].[Name],[Source].[has_logging],[Source].[is_condition],[Source].[is_inactive],[Source].[is_SubProcedure],[Source].[Statement],[Source].[log_source_object],[Source].[log_target_object],[Source].[log_flag_InsertUpdateDelete],[Source].[info_01],[Source].[info_02],[Source].[info_03],[Source].[info_04],[Source].[info_05],[Source].[info_06],[Source].[info_07],[Source].[info_08],[Source].[info_09])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [repo].[GeneratorUspStep]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[repo].[GeneratorUspStep] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO



SET IDENTITY_INSERT [uspgenerator].[GeneratorUspStep] OFF
SET NOCOUNT OFF
GO
